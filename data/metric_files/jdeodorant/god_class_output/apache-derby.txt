org.apache.derby.iapi.store.access.BackingStoreHashtable	[org.apache.derby.iapi.store.access.BackingStoreHashtable::org.apache.derby.iapi.store.access.TransactionController tc, org.apache.derby.iapi.store.access.BackingStoreHashtable::boolean keepAfterCommit, org.apache.derby.iapi.store.access.BackingStoreHashtable::int[] key_column_numbers, org.apache.derby.iapi.store.access.BackingStoreHashtable::boolean remove_duplicates, org.apache.derby.iapi.store.access.BackingStoreHashtable::add_row_to_hash_table(java.util.Hashtable, java.lang.Object[], boolean):void, org.apache.derby.iapi.store.access.BackingStoreHashtable::boolean skipNullKeyColumns, org.apache.derby.iapi.store.access.BackingStoreHashtable::long max_inmemory_rowcnt, org.apache.derby.iapi.store.access.BackingStoreHashtable::long inmemory_rowcnt, org.apache.derby.iapi.store.access.BackingStoreHashtable::long max_inmemory_size, org.apache.derby.iapi.store.access.BackingStoreHashtable::doSpaceAccounting(java.lang.Object[], boolean):void, org.apache.derby.iapi.store.access.BackingStoreHashtable::spillToDisk(java.util.Hashtable, java.lang.Object[]):boolean, org.apache.derby.iapi.store.access.BackingStoreHashtable::put(boolean, java.lang.Object[]):boolean, org.apache.derby.iapi.store.access.BackingStoreHashtable::org.apache.derby.iapi.store.access.RowSource row_source, org.apache.derby.iapi.store.access.BackingStoreHashtable::getNextRowFromRowSource():java.lang.Object[], org.apache.derby.iapi.store.access.BackingStoreHashtable::java.util.Hashtable hash_table, org.apache.derby.iapi.store.access.BackingStoreHashtable::org.apache.derby.iapi.store.access.DiskHashtable diskHashtable, org.apache.derby.iapi.store.access.BackingStoreHashtable::close():void, org.apache.derby.iapi.store.access.BackingStoreHashtable::elements():java.util.Enumeration, org.apache.derby.iapi.store.access.BackingStoreHashtable::get(java.lang.Object):java.lang.Object, org.apache.derby.iapi.store.access.BackingStoreHashtable::remove(java.lang.Object):java.lang.Object, org.apache.derby.iapi.store.access.BackingStoreHashtable::size():int, org.apache.derby.iapi.store.access.BackingStoreHashtable::getEstimatedMemUsage(java.lang.Object[]):long]
org.apache.derby.iapi.store.access.BackingStoreHashtable	[org.apache.derby.iapi.store.access.BackingStoreHashtable::org.apache.derby.iapi.store.access.TransactionController tc, org.apache.derby.iapi.store.access.BackingStoreHashtable::boolean keepAfterCommit, org.apache.derby.iapi.store.access.BackingStoreHashtable::int[] key_column_numbers, org.apache.derby.iapi.store.access.BackingStoreHashtable::boolean remove_duplicates, org.apache.derby.iapi.store.access.BackingStoreHashtable::add_row_to_hash_table(java.util.Hashtable, java.lang.Object[], boolean):void, org.apache.derby.iapi.store.access.BackingStoreHashtable::boolean skipNullKeyColumns, org.apache.derby.iapi.store.access.BackingStoreHashtable::long max_inmemory_rowcnt, org.apache.derby.iapi.store.access.BackingStoreHashtable::long inmemory_rowcnt, org.apache.derby.iapi.store.access.BackingStoreHashtable::long max_inmemory_size, org.apache.derby.iapi.store.access.BackingStoreHashtable::doSpaceAccounting(java.lang.Object[], boolean):void, org.apache.derby.iapi.store.access.BackingStoreHashtable::spillToDisk(java.util.Hashtable, java.lang.Object[]):boolean, org.apache.derby.iapi.store.access.BackingStoreHashtable::put(boolean, java.lang.Object[]):boolean, org.apache.derby.iapi.store.access.BackingStoreHashtable::org.apache.derby.iapi.store.access.RowSource row_source, org.apache.derby.iapi.store.access.BackingStoreHashtable::getNextRowFromRowSource():java.lang.Object[], org.apache.derby.iapi.store.access.BackingStoreHashtable::java.util.Hashtable hash_table, org.apache.derby.iapi.store.access.BackingStoreHashtable::org.apache.derby.iapi.store.access.DiskHashtable diskHashtable]
org.apache.derby.iapi.jdbc.CharacterStreamDescriptor.Builder	[org.apache.derby.iapi.jdbc.CharacterStreamDescriptor.Builder::boolean positionAware, org.apache.derby.iapi.jdbc.CharacterStreamDescriptor.Builder::long curBytePos, org.apache.derby.iapi.jdbc.CharacterStreamDescriptor.Builder::long curCharPos, org.apache.derby.iapi.jdbc.CharacterStreamDescriptor.Builder::long byteLength, org.apache.derby.iapi.jdbc.CharacterStreamDescriptor.Builder::long charLength, org.apache.derby.iapi.jdbc.CharacterStreamDescriptor.Builder::long dataOffset, org.apache.derby.iapi.jdbc.CharacterStreamDescriptor.Builder::long maxCharLength, org.apache.derby.iapi.jdbc.CharacterStreamDescriptor.Builder::java.io.InputStream stream, org.apache.derby.iapi.jdbc.CharacterStreamDescriptor.Builder::positionAware(boolean):org.apache.derby.iapi.jdbc.CharacterStreamDescriptor.Builder, org.apache.derby.iapi.jdbc.CharacterStreamDescriptor.Builder::curBytePos(long):org.apache.derby.iapi.jdbc.CharacterStreamDescriptor.Builder, org.apache.derby.iapi.jdbc.CharacterStreamDescriptor.Builder::curCharPos(long):org.apache.derby.iapi.jdbc.CharacterStreamDescriptor.Builder, org.apache.derby.iapi.jdbc.CharacterStreamDescriptor.Builder::byteLength(long):org.apache.derby.iapi.jdbc.CharacterStreamDescriptor.Builder, org.apache.derby.iapi.jdbc.CharacterStreamDescriptor.Builder::charLength(long):org.apache.derby.iapi.jdbc.CharacterStreamDescriptor.Builder, org.apache.derby.iapi.jdbc.CharacterStreamDescriptor.Builder::dataOffset(long):org.apache.derby.iapi.jdbc.CharacterStreamDescriptor.Builder, org.apache.derby.iapi.jdbc.CharacterStreamDescriptor.Builder::maxCharLength(long):org.apache.derby.iapi.jdbc.CharacterStreamDescriptor.Builder, org.apache.derby.iapi.jdbc.CharacterStreamDescriptor.Builder::stream(java.io.InputStream):org.apache.derby.iapi.jdbc.CharacterStreamDescriptor.Builder]
org.apache.derby.impl.services.monitor.BaseMonitor	[org.apache.derby.impl.services.monitor.BaseMonitor::org.apache.derby.iapi.services.stream.InfoStreams systemStreams, org.apache.derby.impl.services.monitor.BaseMonitor::java.io.PrintStream logging, org.apache.derby.impl.services.monitor.BaseMonitor::reportException(java.lang.Throwable):void, org.apache.derby.impl.services.monitor.BaseMonitor::report(java.lang.String):void, org.apache.derby.impl.services.monitor.BaseMonitor::java.io.PrintWriter tmpWriter, org.apache.derby.impl.services.monitor.BaseMonitor::org.apache.derby.iapi.services.io.AccessibleByteArrayOutputStream tmpArray, org.apache.derby.impl.services.monitor.BaseMonitor::boolean dumpedTempWriter, org.apache.derby.impl.services.monitor.BaseMonitor::getTempWriter():java.io.PrintWriter, org.apache.derby.impl.services.monitor.BaseMonitor::dumpTempWriter(boolean):void]
org.apache.derby.impl.services.monitor.BaseMonitor	[org.apache.derby.impl.services.monitor.BaseMonitor::getPersistentService(java.lang.String):org.apache.derby.iapi.services.monitor.PersistentService, org.apache.derby.impl.services.monitor.BaseMonitor::getPersistentService(java.lang.String, java.lang.String):org.apache.derby.iapi.services.monitor.PersistentService, org.apache.derby.impl.services.monitor.BaseMonitor::getStorageFactoryClassName(java.lang.String):java.lang.String]
org.apache.derby.impl.services.monitor.BaseMonitor	[org.apache.derby.impl.services.monitor.BaseMonitor::java.io.PrintWriter tmpWriter, org.apache.derby.impl.services.monitor.BaseMonitor::org.apache.derby.iapi.services.io.AccessibleByteArrayOutputStream tmpArray, org.apache.derby.impl.services.monitor.BaseMonitor::boolean dumpedTempWriter, org.apache.derby.impl.services.monitor.BaseMonitor::getTempWriter():java.io.PrintWriter, org.apache.derby.impl.services.monitor.BaseMonitor::dumpTempWriter(boolean):void]
org.apache.derby.impl.sql.GenericPreparedStatement	[org.apache.derby.impl.sql.GenericPreparedStatement::long parseTime, org.apache.derby.impl.sql.GenericPreparedStatement::long bindTime, org.apache.derby.impl.sql.GenericPreparedStatement::long optimizeTime, org.apache.derby.impl.sql.GenericPreparedStatement::long generateTime, org.apache.derby.impl.sql.GenericPreparedStatement::long compileTime, org.apache.derby.impl.sql.GenericPreparedStatement::java.sql.Timestamp beginCompileTimestamp, org.apache.derby.impl.sql.GenericPreparedStatement::java.sql.Timestamp endCompileTimestamp, org.apache.derby.impl.sql.GenericPreparedStatement::setCompileTimeMillis(long, long, long, long, long, java.sql.Timestamp, java.sql.Timestamp):void]
org.apache.derby.impl.sql.GenericPreparedStatement	[org.apache.derby.impl.sql.GenericPreparedStatement::java.lang.String execStmtName, org.apache.derby.impl.sql.GenericPreparedStatement::java.lang.String execSchemaName, org.apache.derby.impl.sql.GenericPreparedStatement::setExecuteStatementNameAndSchema(java.lang.String, java.lang.String):void]
org.apache.derby.iapi.services.info.ProductVersionHolder	[org.apache.derby.iapi.services.info.ProductVersionHolder::int majorVersion, org.apache.derby.iapi.services.info.ProductVersionHolder::int minorVersion, org.apache.derby.iapi.services.info.ProductVersionHolder::int maintVersion, org.apache.derby.iapi.services.info.ProductVersionHolder::getFixPackVersion():int, org.apache.derby.iapi.services.info.ProductVersionHolder::isAlpha():boolean, org.apache.derby.iapi.services.info.ProductVersionHolder::getVersionBuildString(boolean):java.lang.String, org.apache.derby.iapi.services.info.ProductVersionHolder::getSimpleVersionString():java.lang.String, org.apache.derby.iapi.services.info.ProductVersionHolder::java.lang.String buildNumber, org.apache.derby.iapi.services.info.ProductVersionHolder::getBuildNumberAsInt():int, org.apache.derby.iapi.services.info.ProductVersionHolder::java.lang.Boolean isBeta, org.apache.derby.iapi.services.info.ProductVersionHolder::isBeta():boolean]
org.apache.derby.iapi.services.info.ProductVersionHolder	[org.apache.derby.iapi.services.info.ProductVersionHolder::int majorVersion, org.apache.derby.iapi.services.info.ProductVersionHolder::int minorVersion, org.apache.derby.iapi.services.info.ProductVersionHolder::int maintVersion, org.apache.derby.iapi.services.info.ProductVersionHolder::getFixPackVersion():int, org.apache.derby.iapi.services.info.ProductVersionHolder::isAlpha():boolean, org.apache.derby.iapi.services.info.ProductVersionHolder::getVersionBuildString(boolean):java.lang.String, org.apache.derby.iapi.services.info.ProductVersionHolder::getSimpleVersionString():java.lang.String, org.apache.derby.iapi.services.info.ProductVersionHolder::java.lang.String buildNumber, org.apache.derby.iapi.services.info.ProductVersionHolder::getBuildNumberAsInt():int]
org.apache.derby.impl.jdbc.EmbedConnection	[org.apache.derby.impl.jdbc.EmbedConnection::isStartReplicationSlaveBoot(java.util.Properties):boolean, org.apache.derby.impl.jdbc.EmbedConnection::getReplicationOperation(java.util.Properties):java.lang.String, org.apache.derby.impl.jdbc.EmbedConnection::isStartReplicationMasterBoot(java.util.Properties):boolean, org.apache.derby.impl.jdbc.EmbedConnection::isReplicationFailover(java.util.Properties):boolean, org.apache.derby.impl.jdbc.EmbedConnection::isStopReplicationMasterBoot(java.util.Properties):boolean, org.apache.derby.impl.jdbc.EmbedConnection::isStopReplicationSlaveBoot(java.util.Properties):boolean, org.apache.derby.impl.jdbc.EmbedConnection::isInternalShutdownSlaveDatabase(java.util.Properties):boolean]
org.apache.derby.impl.jdbc.EmbedConnection	[org.apache.derby.impl.jdbc.EmbedConnection::createBoot(java.util.Properties):boolean, org.apache.derby.impl.jdbc.EmbedConnection::isEncryptionBoot(java.util.Properties):boolean, org.apache.derby.impl.jdbc.EmbedConnection::newSQLException(java.lang.String):java.sql.SQLException]
org.apache.derby.impl.jdbc.EmbedConnection	[org.apache.derby.impl.jdbc.EmbedConnection::java.util.HashSet lobFiles, org.apache.derby.impl.jdbc.EmbedConnection::addLobFile(org.apache.derby.impl.jdbc.LOBFile):void, org.apache.derby.impl.jdbc.EmbedConnection::removeLobFile(org.apache.derby.impl.jdbc.LOBFile):void]
org.apache.derby.iapi.store.raw.FetchDescriptor	[org.apache.derby.iapi.store.raw.FetchDescriptor::int row_length, org.apache.derby.iapi.store.raw.FetchDescriptor::org.apache.derby.iapi.services.io.FormatableBitSet validColumns, org.apache.derby.iapi.store.raw.FetchDescriptor::getValidColumns():org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.store.raw.FetchDescriptor::setValidColumns(org.apache.derby.iapi.services.io.FormatableBitSet):void, org.apache.derby.iapi.store.raw.FetchDescriptor::setMaxFetchColumnId():void, org.apache.derby.iapi.store.raw.FetchDescriptor::int maxFetchColumnId, org.apache.derby.iapi.store.raw.FetchDescriptor::getMaxFetchColumnId():int, org.apache.derby.iapi.store.raw.FetchDescriptor::int[] validColumnsArray, org.apache.derby.iapi.store.raw.FetchDescriptor::getValidColumnsArray():int[]]
org.apache.derby.iapi.store.raw.FetchDescriptor	[org.apache.derby.iapi.store.raw.FetchDescriptor::int[] materialized_cols, org.apache.derby.iapi.store.raw.FetchDescriptor::getMaterializedColumns():int[], org.apache.derby.iapi.store.raw.FetchDescriptor::reset():void]
org.apache.derby.iapi.store.raw.FetchDescriptor	[org.apache.derby.iapi.store.raw.FetchDescriptor::int row_length, org.apache.derby.iapi.store.raw.FetchDescriptor::org.apache.derby.iapi.services.io.FormatableBitSet validColumns, org.apache.derby.iapi.store.raw.FetchDescriptor::getValidColumns():org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.store.raw.FetchDescriptor::setValidColumns(org.apache.derby.iapi.services.io.FormatableBitSet):void, org.apache.derby.iapi.store.raw.FetchDescriptor::setMaxFetchColumnId():void, org.apache.derby.iapi.store.raw.FetchDescriptor::int maxFetchColumnId, org.apache.derby.iapi.store.raw.FetchDescriptor::getMaxFetchColumnId():int]
org.apache.derby.impl.sql.execute.NormalizeResultSet	[org.apache.derby.impl.sql.execute.NormalizeResultSet::org.apache.derby.iapi.sql.execute.ExecRow normalizedRow, org.apache.derby.impl.sql.execute.NormalizeResultSet::int numCols, org.apache.derby.impl.sql.execute.NormalizeResultSet::int startCol, org.apache.derby.impl.sql.execute.NormalizeResultSet::org.apache.derby.iapi.sql.ResultDescription resultDescription, org.apache.derby.impl.sql.execute.NormalizeResultSet::org.apache.derby.iapi.types.DataTypeDescriptor[] desiredTypes, org.apache.derby.impl.sql.execute.NormalizeResultSet::normalizeRow(org.apache.derby.iapi.sql.execute.ExecRow):org.apache.derby.iapi.sql.execute.ExecRow]
org.apache.derby.impl.load.ColumnInfo	[org.apache.derby.impl.load.ColumnInfo::java.util.ArrayList vtiColumnNames, org.apache.derby.impl.load.ColumnInfo::getColumnNamesWithCasts():java.lang.String, org.apache.derby.impl.load.ColumnInfo::java.util.ArrayList columnTypes, org.apache.derby.impl.load.ColumnInfo::int noOfColumns, org.apache.derby.impl.load.ColumnInfo::java.util.ArrayList insertColumnNames, org.apache.derby.impl.load.ColumnInfo::getInsertColumnNames():java.lang.String]
org.apache.derby.impl.load.ColumnInfo	[org.apache.derby.impl.load.ColumnInfo::java.util.ArrayList vtiColumnNames, org.apache.derby.impl.load.ColumnInfo::getColumnNamesWithCasts():java.lang.String, org.apache.derby.impl.load.ColumnInfo::java.util.ArrayList columnTypes, org.apache.derby.impl.load.ColumnInfo::int noOfColumns]
org.apache.derby.impl.sql.catalog.DropDependencyFilter	[org.apache.derby.impl.sql.catalog.DropDependencyFilter::org.apache.derby.iapi.types.DataValueFactory dataValueFactory, org.apache.derby.impl.sql.catalog.DropDependencyFilter::getDataValueFactory():org.apache.derby.iapi.types.DataValueFactory, org.apache.derby.impl.sql.catalog.DropDependencyFilter::org.apache.derby.iapi.types.BooleanDataValue trueValue, org.apache.derby.impl.sql.catalog.DropDependencyFilter::getTrueValue():org.apache.derby.iapi.types.BooleanDataValue, org.apache.derby.impl.sql.catalog.DropDependencyFilter::org.apache.derby.iapi.types.BooleanDataValue falseValue, org.apache.derby.impl.sql.catalog.DropDependencyFilter::getFalseValue():org.apache.derby.iapi.types.BooleanDataValue]
org.apache.derby.impl.sql.catalog.DropDependencyFilter	[org.apache.derby.impl.sql.catalog.DropDependencyFilter::org.apache.derby.iapi.types.BooleanDataValue trueValue, org.apache.derby.impl.sql.catalog.DropDependencyFilter::getTrueValue():org.apache.derby.iapi.types.BooleanDataValue, org.apache.derby.impl.sql.catalog.DropDependencyFilter::org.apache.derby.iapi.types.BooleanDataValue falseValue, org.apache.derby.impl.sql.catalog.DropDependencyFilter::getFalseValue():org.apache.derby.iapi.types.BooleanDataValue]
org.apache.derby.impl.sql.compile.DMLModStatementNode	[org.apache.derby.impl.sql.compile.DMLModStatementNode::org.apache.derby.impl.sql.execute.FKInfo[] fkInfo, org.apache.derby.impl.sql.compile.DMLModStatementNode::getFKInfo():org.apache.derby.impl.sql.execute.FKInfo[], org.apache.derby.impl.sql.compile.DMLModStatementNode::boolean bound, org.apache.derby.impl.sql.compile.DMLModStatementNode::org.apache.derby.impl.sql.execute.TriggerInfo triggerInfo, org.apache.derby.impl.sql.compile.DMLModStatementNode::generateTriggerInfo(org.apache.derby.iapi.sql.dictionary.GenericDescriptorList, org.apache.derby.iapi.sql.dictionary.TableDescriptor, int[]):void, org.apache.derby.impl.sql.compile.DMLModStatementNode::getTriggerInfo():org.apache.derby.impl.sql.execute.TriggerInfo, org.apache.derby.impl.sql.compile.DMLModStatementNode::org.apache.derby.impl.sql.compile.ValueNode checkConstraints, org.apache.derby.impl.sql.compile.DMLModStatementNode::getCheckConstraints():org.apache.derby.impl.sql.compile.ValueNode]
org.apache.derby.impl.sql.compile.DMLModStatementNode	[org.apache.derby.impl.sql.compile.DMLModStatementNode::org.apache.derby.impl.sql.execute.FKInfo[] fkInfo, org.apache.derby.impl.sql.compile.DMLModStatementNode::getFKInfo():org.apache.derby.impl.sql.execute.FKInfo[], org.apache.derby.impl.sql.compile.DMLModStatementNode::boolean bound, org.apache.derby.impl.sql.compile.DMLModStatementNode::org.apache.derby.impl.sql.execute.TriggerInfo triggerInfo, org.apache.derby.impl.sql.compile.DMLModStatementNode::generateTriggerInfo(org.apache.derby.iapi.sql.dictionary.GenericDescriptorList, org.apache.derby.iapi.sql.dictionary.TableDescriptor, int[]):void, org.apache.derby.impl.sql.compile.DMLModStatementNode::getTriggerInfo():org.apache.derby.impl.sql.execute.TriggerInfo]
org.apache.derby.impl.sql.compile.DMLModStatementNode	[org.apache.derby.impl.sql.compile.DMLModStatementNode::org.apache.derby.impl.sql.execute.FKInfo[] fkInfo, org.apache.derby.impl.sql.compile.DMLModStatementNode::getFKInfo():org.apache.derby.impl.sql.execute.FKInfo[], org.apache.derby.impl.sql.compile.DMLModStatementNode::boolean bound]
org.apache.derby.impl.sql.execute.RIBulkChecker	[org.apache.derby.impl.sql.execute.RIBulkChecker::org.apache.derby.iapi.store.access.GroupFetchScanController referencedKeyScan, org.apache.derby.impl.sql.execute.RIBulkChecker::org.apache.derby.iapi.types.DataValueDescriptor[][] referencedKeyRowArray, org.apache.derby.impl.sql.execute.RIBulkChecker::int currRefRowIndex, org.apache.derby.impl.sql.execute.RIBulkChecker::int lastRefRowIndex, org.apache.derby.impl.sql.execute.RIBulkChecker::getNextRef():org.apache.derby.iapi.types.DataValueDescriptor[]]
org.apache.derby.impl.sql.execute.RIBulkChecker	[org.apache.derby.impl.sql.execute.RIBulkChecker::org.apache.derby.iapi.store.access.GroupFetchScanController foreignKeyScan, org.apache.derby.impl.sql.execute.RIBulkChecker::org.apache.derby.iapi.types.DataValueDescriptor[][] foreignKeyRowArray, org.apache.derby.impl.sql.execute.RIBulkChecker::int currFKRowIndex, org.apache.derby.impl.sql.execute.RIBulkChecker::int lastFKRowIndex, org.apache.derby.impl.sql.execute.RIBulkChecker::getNextFK():org.apache.derby.iapi.types.DataValueDescriptor[]]
org.apache.derby.impl.sql.execute.RIBulkChecker	[org.apache.derby.impl.sql.execute.RIBulkChecker::int numColumns, org.apache.derby.impl.sql.execute.RIBulkChecker::greaterThan(org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.DataValueDescriptor[]):int, org.apache.derby.impl.sql.execute.RIBulkChecker::anyNull(org.apache.derby.iapi.types.DataValueDescriptor[]):boolean]
org.apache.derby.impl.sql.execute.RIBulkChecker	[org.apache.derby.impl.sql.execute.RIBulkChecker::org.apache.derby.iapi.store.access.GroupFetchScanController referencedKeyScan, org.apache.derby.impl.sql.execute.RIBulkChecker::org.apache.derby.iapi.types.DataValueDescriptor[][] referencedKeyRowArray, org.apache.derby.impl.sql.execute.RIBulkChecker::int currRefRowIndex, org.apache.derby.impl.sql.execute.RIBulkChecker::int lastRefRowIndex, org.apache.derby.impl.sql.execute.RIBulkChecker::getNextRef():org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.impl.sql.execute.RIBulkChecker::org.apache.derby.iapi.store.access.ConglomerateController unreferencedCC, org.apache.derby.impl.sql.execute.RIBulkChecker::org.apache.derby.iapi.sql.execute.ExecRow firstRowToFail, org.apache.derby.impl.sql.execute.RIBulkChecker::failure(org.apache.derby.iapi.types.DataValueDescriptor[]):void, org.apache.derby.impl.sql.execute.RIBulkChecker::int failedCounter, org.apache.derby.impl.sql.execute.RIBulkChecker::doCheck():int, org.apache.derby.impl.sql.execute.RIBulkChecker::boolean quitOnFirstFailure, org.apache.derby.impl.sql.execute.RIBulkChecker::int numColumns, org.apache.derby.impl.sql.execute.RIBulkChecker::greaterThan(org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.DataValueDescriptor[]):int, org.apache.derby.impl.sql.execute.RIBulkChecker::anyNull(org.apache.derby.iapi.types.DataValueDescriptor[]):boolean]
org.apache.derby.impl.sql.execute.RIBulkChecker	[org.apache.derby.impl.sql.execute.RIBulkChecker::org.apache.derby.iapi.store.access.ConglomerateController unreferencedCC, org.apache.derby.impl.sql.execute.RIBulkChecker::org.apache.derby.iapi.sql.execute.ExecRow firstRowToFail, org.apache.derby.impl.sql.execute.RIBulkChecker::failure(org.apache.derby.iapi.types.DataValueDescriptor[]):void]
org.apache.derby.impl.sql.execute.RIBulkChecker	[org.apache.derby.impl.sql.execute.RIBulkChecker::org.apache.derby.iapi.store.access.ConglomerateController unreferencedCC, org.apache.derby.impl.sql.execute.RIBulkChecker::org.apache.derby.iapi.sql.execute.ExecRow firstRowToFail, org.apache.derby.impl.sql.execute.RIBulkChecker::failure(org.apache.derby.iapi.types.DataValueDescriptor[]):void, org.apache.derby.impl.sql.execute.RIBulkChecker::int failedCounter, org.apache.derby.impl.sql.execute.RIBulkChecker::doCheck():int, org.apache.derby.impl.sql.execute.RIBulkChecker::boolean quitOnFirstFailure, org.apache.derby.impl.sql.execute.RIBulkChecker::int numColumns, org.apache.derby.impl.sql.execute.RIBulkChecker::greaterThan(org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.DataValueDescriptor[]):int, org.apache.derby.impl.sql.execute.RIBulkChecker::anyNull(org.apache.derby.iapi.types.DataValueDescriptor[]):boolean]
org.apache.derby.impl.sql.execute.TriggerEventActivator	[org.apache.derby.impl.sql.execute.TriggerEventActivator::org.apache.derby.iapi.sql.conn.LanguageConnectionContext lcc, org.apache.derby.impl.sql.execute.TriggerEventActivator::org.apache.derby.impl.sql.execute.InternalTriggerExecutionContext tec, org.apache.derby.impl.sql.execute.TriggerEventActivator::org.apache.derby.impl.sql.execute.GenericTriggerExecutor[][] executors, org.apache.derby.impl.sql.execute.TriggerEventActivator::cleanup():void, org.apache.derby.impl.sql.execute.TriggerEventActivator::org.apache.derby.iapi.sql.Activation activation, org.apache.derby.impl.sql.execute.TriggerEventActivator::setupExecutors(org.apache.derby.impl.sql.execute.TriggerInfo):void]
org.apache.derby.impl.store.access.conglomerate.OpenConglomerateScratchSpace	[org.apache.derby.impl.store.access.conglomerate.OpenConglomerateScratchSpace::org.apache.derby.iapi.services.io.FormatableBitSet row_for_export_column_list, org.apache.derby.impl.store.access.conglomerate.OpenConglomerateScratchSpace::org.apache.derby.iapi.services.loader.InstanceGetter[] row_for_export_class_template, org.apache.derby.impl.store.access.conglomerate.OpenConglomerateScratchSpace::init(org.apache.derby.iapi.services.io.FormatableBitSet):void, org.apache.derby.impl.store.access.conglomerate.OpenConglomerateScratchSpace::get_row_for_export():org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.impl.store.access.conglomerate.OpenConglomerateScratchSpace::org.apache.derby.iapi.types.DataValueDescriptor[] scratch_template, org.apache.derby.impl.store.access.conglomerate.OpenConglomerateScratchSpace::get_template():org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.impl.store.access.conglomerate.OpenConglomerateScratchSpace::int[] format_ids]
org.apache.derby.impl.store.access.conglomerate.OpenConglomerateScratchSpace	[org.apache.derby.impl.store.access.conglomerate.OpenConglomerateScratchSpace::org.apache.derby.iapi.types.DataValueDescriptor[] scratch_template, org.apache.derby.impl.store.access.conglomerate.OpenConglomerateScratchSpace::get_template():org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.impl.store.access.conglomerate.OpenConglomerateScratchSpace::int[] format_ids]
org.apache.derby.impl.store.access.conglomerate.OpenConglomerateScratchSpace	[org.apache.derby.impl.store.access.conglomerate.OpenConglomerateScratchSpace::org.apache.derby.iapi.services.io.FormatableBitSet row_for_export_column_list, org.apache.derby.impl.store.access.conglomerate.OpenConglomerateScratchSpace::org.apache.derby.iapi.services.loader.InstanceGetter[] row_for_export_class_template, org.apache.derby.impl.store.access.conglomerate.OpenConglomerateScratchSpace::init(org.apache.derby.iapi.services.io.FormatableBitSet):void, org.apache.derby.impl.store.access.conglomerate.OpenConglomerateScratchSpace::get_row_for_export():org.apache.derby.iapi.types.DataValueDescriptor[]]
org.apache.derby.impl.store.access.sort.MergeSort	[org.apache.derby.impl.store.access.sort.MergeSort::org.apache.derby.iapi.types.DataValueDescriptor[] template, org.apache.derby.impl.store.access.sort.MergeSort::checkColumnTypes(org.apache.derby.iapi.types.DataValueDescriptor[]):void, org.apache.derby.impl.store.access.sort.MergeSort::org.apache.derby.iapi.store.access.ColumnOrdering[] columnOrdering, org.apache.derby.impl.store.access.sort.MergeSort::int[] columnOrderingMap, org.apache.derby.impl.store.access.sort.MergeSort::boolean[] columnOrderingAscendingMap, org.apache.derby.impl.store.access.sort.MergeSort::compare(org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.DataValueDescriptor[]):int]
org.apache.derby.iapi.services.context.ContextService	[org.apache.derby.iapi.services.context.ContextService::java.lang.ThreadLocal threadContextList, org.apache.derby.iapi.services.context.ContextService::getCurrentContextManager():org.apache.derby.iapi.services.context.ContextManager, org.apache.derby.iapi.services.context.ContextService::resetCurrentContextManager(org.apache.derby.iapi.services.context.ContextManager):void, org.apache.derby.iapi.services.context.ContextService::addToThreadList(java.lang.Thread, org.apache.derby.iapi.services.context.ContextManager):boolean, org.apache.derby.iapi.services.context.ContextService::setCurrentContextManager(org.apache.derby.iapi.services.context.ContextManager):void]
org.apache.derby.iapi.services.loader.ClassInspector	[org.apache.derby.iapi.services.loader.ClassInspector::resolveMethod(java.lang.Class, java.lang.String, java.lang.Class[], java.lang.Class[], boolean[], boolean, boolean, java.lang.reflect.Member[]):java.lang.reflect.Member, org.apache.derby.iapi.services.loader.ClassInspector::isMethodMoreSpecificOrEqual(java.lang.reflect.Member, java.lang.reflect.Member, boolean[]):boolean, org.apache.derby.iapi.services.loader.ClassInspector::signatureConvertableFromTo(java.lang.Class[], java.lang.Class[], java.lang.Class[], boolean[], boolean):boolean, org.apache.derby.iapi.services.loader.ClassInspector::classConvertableFromTo(java.lang.Class, java.lang.Class, boolean):boolean]
org.apache.derby.impl.services.locks.Timeout	[org.apache.derby.impl.services.locks.Timeout::char[] outputRow, org.apache.derby.impl.services.locks.Timeout::cpArray(java.lang.String, int, int):void, org.apache.derby.impl.services.locks.Timeout::java.util.Hashtable currentRow, org.apache.derby.impl.services.locks.Timeout::timeoutInfoHash():boolean]
org.apache.derby.impl.services.locks.Timeout	[org.apache.derby.impl.services.locks.Timeout::org.apache.derby.iapi.store.access.TransactionController tc, org.apache.derby.impl.services.locks.Timeout::org.apache.derby.impl.services.locks.TableNameInfo tabInfo, org.apache.derby.impl.services.locks.Timeout::org.apache.derby.iapi.services.locks.Latch currentLock, org.apache.derby.impl.services.locks.Timeout::buildLockTableString():java.lang.String, org.apache.derby.impl.services.locks.Timeout::long currentTime, org.apache.derby.impl.services.locks.Timeout::java.util.Enumeration lockTable, org.apache.derby.impl.services.locks.Timeout::buildString(java.util.Enumeration, long):java.lang.String, org.apache.derby.impl.services.locks.Timeout::char[] outputRow, org.apache.derby.impl.services.locks.Timeout::cpArray(java.lang.String, int, int):void, org.apache.derby.impl.services.locks.Timeout::java.util.Hashtable currentRow, org.apache.derby.impl.services.locks.Timeout::timeoutInfoHash():boolean]
org.apache.derby.impl.services.stream.SingleStream	[org.apache.derby.impl.services.stream.SingleStream::makeMethodHPW(java.lang.String, org.apache.derby.iapi.services.stream.PrintWriterGetHeader):org.apache.derby.iapi.services.stream.HeaderPrintWriter, org.apache.derby.impl.services.stream.SingleStream::makeFieldHPW(java.lang.String, org.apache.derby.iapi.services.stream.PrintWriterGetHeader):org.apache.derby.iapi.services.stream.HeaderPrintWriter, org.apache.derby.impl.services.stream.SingleStream::makeValueHPW(java.lang.reflect.Member, java.lang.Object, org.apache.derby.iapi.services.stream.PrintWriterGetHeader, java.lang.String):org.apache.derby.iapi.services.stream.HeaderPrintWriter, org.apache.derby.impl.services.stream.SingleStream::useDefaultStream(org.apache.derby.iapi.services.stream.PrintWriterGetHeader, java.lang.Throwable):org.apache.derby.iapi.services.stream.HeaderPrintWriter, org.apache.derby.impl.services.stream.SingleStream::useDefaultStream(org.apache.derby.iapi.services.stream.PrintWriterGetHeader):org.apache.derby.iapi.services.stream.HeaderPrintWriter]
org.apache.derby.impl.services.stream.SingleStream	[org.apache.derby.impl.services.stream.SingleStream::java.lang.String PBfileName, org.apache.derby.impl.services.stream.SingleStream::makeFileHPW(java.lang.String, org.apache.derby.iapi.services.stream.PrintWriterGetHeader):org.apache.derby.iapi.services.stream.HeaderPrintWriter, org.apache.derby.impl.services.stream.SingleStream::org.apache.derby.iapi.services.stream.PrintWriterGetHeader PBheader]
org.apache.derby.impl.sql.compile.ConstraintDefinitionNode	[org.apache.derby.impl.sql.compile.ConstraintDefinitionNode::org.apache.derby.iapi.services.uuid.UUIDFactory uuidFactory, org.apache.derby.impl.sql.compile.ConstraintDefinitionNode::getUUIDFactory():org.apache.derby.iapi.services.uuid.UUIDFactory, org.apache.derby.impl.sql.compile.ConstraintDefinitionNode::org.apache.derby.catalog.UUID backingIndexUUID, org.apache.derby.impl.sql.compile.ConstraintDefinitionNode::getBackingIndexUUID():org.apache.derby.catalog.UUID]
org.apache.derby.impl.sql.compile.ExpressionClassBuilder	[org.apache.derby.impl.sql.compile.ExpressionClassBuilder::int nextFieldNum, org.apache.derby.impl.sql.compile.ExpressionClassBuilder::newFieldName():java.lang.String, org.apache.derby.impl.sql.compile.ExpressionClassBuilder::newRowLocationScanResultSetName():java.lang.String, org.apache.derby.impl.sql.compile.ExpressionClassBuilder::java.lang.String currentRowScanResultSetName]
org.apache.derby.impl.sql.compile.ExpressionClassBuilder	[org.apache.derby.impl.sql.compile.ExpressionClassBuilder::java.lang.Object getDVF, org.apache.derby.impl.sql.compile.ExpressionClassBuilder::pushDataValueFactory(org.apache.derby.iapi.services.compiler.MethodBuilder):void, org.apache.derby.impl.sql.compile.ExpressionClassBuilder::pushGetResultSetFactoryExpression(org.apache.derby.iapi.services.compiler.MethodBuilder):void, org.apache.derby.impl.sql.compile.ExpressionClassBuilder::pushGetExecutionFactoryExpression(org.apache.derby.iapi.services.compiler.MethodBuilder):void, org.apache.derby.impl.sql.compile.ExpressionClassBuilder::java.lang.Object getRSF, org.apache.derby.impl.sql.compile.ExpressionClassBuilder::java.lang.Object getEF]
org.apache.derby.impl.sql.compile.ExpressionClassBuilder	[org.apache.derby.impl.sql.compile.ExpressionClassBuilder::int nextExprNum, org.apache.derby.impl.sql.compile.ExpressionClassBuilder::newExprFun():org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder::newUserExprFun():org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder::int nextNonFastExpr, org.apache.derby.impl.sql.compile.ExpressionClassBuilder::newGeneratedFun(java.lang.String, int, java.lang.String[]):org.apache.derby.iapi.services.compiler.MethodBuilder]
org.apache.derby.impl.sql.compile.ExpressionClassBuilder	[org.apache.derby.impl.sql.compile.ExpressionClassBuilder::int nextExprNum, org.apache.derby.impl.sql.compile.ExpressionClassBuilder::newExprFun():org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder::newUserExprFun():org.apache.derby.iapi.services.compiler.MethodBuilder]
org.apache.derby.impl.sql.compile.ResultColumnList	[org.apache.derby.impl.sql.compile.ResultColumnList::boolean indexRow, org.apache.derby.impl.sql.compile.ResultColumnList::long conglomerateId, org.apache.derby.impl.sql.compile.ResultColumnList::boolean forUpdate, org.apache.derby.impl.sql.compile.ResultColumnList::setIndexRow(long, boolean):void]
org.apache.derby.impl.sql.compile.ResultColumnList	[org.apache.derby.impl.sql.compile.ResultColumnList::int orderBySelect, org.apache.derby.impl.sql.compile.ResultColumnList::incOrderBySelect():void, org.apache.derby.impl.sql.compile.ResultColumnList::decOrderBySelect():void, org.apache.derby.impl.sql.compile.ResultColumnList::copyOrderBySelect(org.apache.derby.impl.sql.compile.ResultColumnList):void]
org.apache.derby.impl.sql.execute.AutoincrementCounter	[org.apache.derby.impl.sql.execute.AutoincrementCounter::long finalValue, org.apache.derby.impl.sql.execute.AutoincrementCounter::reset(boolean):void, org.apache.derby.impl.sql.execute.AutoincrementCounter::update(long):long, org.apache.derby.impl.sql.execute.AutoincrementCounter::getCurrentValue():java.lang.Long, org.apache.derby.impl.sql.execute.AutoincrementCounter::long counter, org.apache.derby.impl.sql.execute.AutoincrementCounter::boolean initialized]
org.apache.derby.impl.sql.execute.SetConstraintsConstantAction	[org.apache.derby.impl.sql.execute.SetConstraintsConstantAction::org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList cdl, org.apache.derby.impl.sql.execute.SetConstraintsConstantAction::org.apache.derby.catalog.UUID[] cuuids, org.apache.derby.impl.sql.execute.SetConstraintsConstantAction::org.apache.derby.catalog.UUID[] tuuids, org.apache.derby.impl.sql.execute.SetConstraintsConstantAction::getConstraintDescriptorList(org.apache.derby.iapi.sql.dictionary.DataDictionary):org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList]
org.apache.derby.impl.sql.execute.SetOpResultSet	[org.apache.derby.impl.sql.execute.SetOpResultSet::org.apache.derby.iapi.types.DataValueDescriptor[] prevCols, org.apache.derby.impl.sql.execute.SetOpResultSet::int[] intermediateOrderByColumns, org.apache.derby.impl.sql.execute.SetOpResultSet::int[] intermediateOrderByDirection, org.apache.derby.impl.sql.execute.SetOpResultSet::compare(org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.DataValueDescriptor[]):int, org.apache.derby.impl.sql.execute.SetOpResultSet::isDuplicate(org.apache.derby.iapi.types.DataValueDescriptor[]):boolean]
org.apache.derby.impl.sql.execute.rts.RealBasicNoPutResultSetStatistics	[org.apache.derby.impl.sql.execute.rts.RealBasicNoPutResultSetStatistics::double optimizerEstimatedRowCount, org.apache.derby.impl.sql.execute.rts.RealBasicNoPutResultSetStatistics::dumpEstimatedCosts(java.lang.String):java.lang.String, org.apache.derby.impl.sql.execute.rts.RealBasicNoPutResultSetStatistics::double optimizerEstimatedCost, org.apache.derby.impl.sql.execute.rts.RealBasicNoPutResultSetStatistics::formatDouble(double):java.lang.String]
org.apache.derby.impl.sql.execute.rts.RealBasicNoPutResultSetStatistics	[org.apache.derby.impl.sql.execute.rts.RealBasicNoPutResultSetStatistics::long constructorTime, org.apache.derby.impl.sql.execute.rts.RealBasicNoPutResultSetStatistics::dumpTimeStats(java.lang.String, java.lang.String):java.lang.String, org.apache.derby.impl.sql.execute.rts.RealBasicNoPutResultSetStatistics::getTotalTime():long, org.apache.derby.impl.sql.execute.rts.RealBasicNoPutResultSetStatistics::long openTime, org.apache.derby.impl.sql.execute.rts.RealBasicNoPutResultSetStatistics::long closeTime]
org.apache.derby.impl.sql.execute.rts.RealBasicNoPutResultSetStatistics	[org.apache.derby.impl.sql.execute.rts.RealBasicNoPutResultSetStatistics::getChildren():java.util.Vector, org.apache.derby.impl.sql.execute.rts.RealBasicNoPutResultSetStatistics::getChildrenTime():long, org.apache.derby.impl.sql.execute.rts.RealBasicNoPutResultSetStatistics::getNodeTime():long]
org.apache.derby.impl.store.access.btree.OpenBTree	[org.apache.derby.impl.store.access.btree.OpenBTree::org.apache.derby.impl.store.access.btree.BTree init_conglomerate, org.apache.derby.impl.store.access.btree.OpenBTree::getConglomerate():org.apache.derby.impl.store.access.btree.BTree, org.apache.derby.impl.store.access.btree.OpenBTree::isIndexableRowConsistent(org.apache.derby.iapi.types.DataValueDescriptor[]):void, org.apache.derby.impl.store.access.btree.OpenBTree::getColumnSortOrderInfo():boolean[], org.apache.derby.impl.store.access.btree.OpenBTree::org.apache.derby.iapi.store.access.conglomerate.TransactionManager init_xact_manager, org.apache.derby.impl.store.access.btree.OpenBTree::getXactMgr():org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.impl.store.access.btree.OpenBTree::int init_openmode, org.apache.derby.impl.store.access.btree.OpenBTree::getOpenMode():int]
org.apache.derby.impl.store.access.btree.OpenBTree	[org.apache.derby.impl.store.access.btree.OpenBTree::org.apache.derby.iapi.store.access.conglomerate.TransactionManager init_xact_manager, org.apache.derby.impl.store.access.btree.OpenBTree::getXactMgr():org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.impl.store.access.btree.OpenBTree::int init_openmode, org.apache.derby.impl.store.access.btree.OpenBTree::getOpenMode():int]
org.apache.derby.impl.store.access.btree.OpenBTree	[org.apache.derby.impl.store.access.btree.OpenBTree::org.apache.derby.impl.store.access.btree.BTree init_conglomerate, org.apache.derby.impl.store.access.btree.OpenBTree::getConglomerate():org.apache.derby.impl.store.access.btree.BTree, org.apache.derby.impl.store.access.btree.OpenBTree::isIndexableRowConsistent(org.apache.derby.iapi.types.DataValueDescriptor[]):void, org.apache.derby.impl.store.access.btree.OpenBTree::getColumnSortOrderInfo():boolean[]]
org.apache.derby.impl.store.access.conglomerate.GenericScanController	[org.apache.derby.impl.store.access.conglomerate.GenericScanController::org.apache.derby.iapi.types.DataValueDescriptor[] init_startKeyValue, org.apache.derby.impl.store.access.conglomerate.GenericScanController::getStartKeyValue():org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.impl.store.access.conglomerate.GenericScanController::org.apache.derby.iapi.store.access.Qualifier[][] init_qualifier, org.apache.derby.impl.store.access.conglomerate.GenericScanController::getQualifier():org.apache.derby.iapi.store.access.Qualifier[][], org.apache.derby.impl.store.access.conglomerate.GenericScanController::org.apache.derby.iapi.types.DataValueDescriptor[] init_stopKeyValue, org.apache.derby.impl.store.access.conglomerate.GenericScanController::getStopKeyValue():org.apache.derby.iapi.types.DataValueDescriptor[]]
org.apache.derby.impl.store.access.conglomerate.GenericScanController	[org.apache.derby.impl.store.access.conglomerate.GenericScanController::int init_startSearchOperator, org.apache.derby.impl.store.access.conglomerate.GenericScanController::getStartSearchOperator():int, org.apache.derby.impl.store.access.conglomerate.GenericScanController::int init_stopSearchOperator, org.apache.derby.impl.store.access.conglomerate.GenericScanController::getStopSearchOperator():int]
org.apache.derby.impl.store.access.conglomerate.GenericScanController	[org.apache.derby.impl.store.access.conglomerate.GenericScanController::org.apache.derby.iapi.types.DataValueDescriptor[] init_startKeyValue, org.apache.derby.impl.store.access.conglomerate.GenericScanController::getStartKeyValue():org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.impl.store.access.conglomerate.GenericScanController::org.apache.derby.iapi.store.access.Qualifier[][] init_qualifier, org.apache.derby.impl.store.access.conglomerate.GenericScanController::getQualifier():org.apache.derby.iapi.store.access.Qualifier[][]]
org.apache.derby.iapi.services.context.ContextManager	[org.apache.derby.iapi.services.context.ContextManager::java.util.Locale messageLocale, org.apache.derby.iapi.services.context.ContextManager::setMessageLocale(java.lang.String):void, org.apache.derby.iapi.services.context.ContextManager::getMessageLocale():java.util.Locale, org.apache.derby.iapi.services.context.ContextManager::org.apache.derby.iapi.services.i18n.LocaleFinder finder]
org.apache.derby.iapi.services.context.ContextManager	[org.apache.derby.iapi.services.context.ContextManager::java.util.HashMap ctxTable, org.apache.derby.iapi.services.context.ContextManager::java.util.ArrayList holder, org.apache.derby.iapi.services.context.ContextManager::isEmpty():boolean, org.apache.derby.iapi.services.context.ContextManager::getContextStack(java.lang.String):java.util.List]
org.apache.derby.iapi.services.context.ErrorStringBuilder	[org.apache.derby.iapi.services.context.ErrorStringBuilder::java.io.PrintWriter printWriter, org.apache.derby.iapi.services.context.ErrorStringBuilder::org.apache.derby.iapi.services.stream.PrintWriterGetHeader headerGetter, org.apache.derby.iapi.services.context.ErrorStringBuilder::append(java.lang.String):void, org.apache.derby.iapi.services.context.ErrorStringBuilder::appendln(java.lang.String):void, org.apache.derby.iapi.services.context.ErrorStringBuilder::stackTrace(java.lang.Throwable):void]
org.apache.derby.iapi.services.context.ErrorStringBuilder	[org.apache.derby.iapi.services.context.ErrorStringBuilder::java.io.StringWriter stringWriter, org.apache.derby.iapi.services.context.ErrorStringBuilder::reset():void, org.apache.derby.iapi.services.context.ErrorStringBuilder::get():java.lang.StringBuffer]
org.apache.derby.iapi.services.io.FormatIdInputStream	[org.apache.derby.iapi.services.io.FormatIdInputStream::org.apache.derby.iapi.services.loader.ClassFactory cf, org.apache.derby.iapi.services.io.FormatIdInputStream::getObjectStream():java.io.ObjectInputStream, org.apache.derby.iapi.services.io.FormatIdInputStream::getClassFactory():org.apache.derby.iapi.services.loader.ClassFactory]
org.apache.derby.iapi.sql.dictionary.CatalogRowFactory	[org.apache.derby.iapi.sql.dictionary.CatalogRowFactory::java.lang.String[] indexNames, org.apache.derby.iapi.sql.dictionary.CatalogRowFactory::getIndexName(int):java.lang.String, org.apache.derby.iapi.sql.dictionary.CatalogRowFactory::boolean[] indexUniqueness, org.apache.derby.iapi.sql.dictionary.CatalogRowFactory::isIndexUnique(int):boolean]
org.apache.derby.iapi.sql.dictionary.CatalogRowFactory	[org.apache.derby.iapi.sql.dictionary.CatalogRowFactory::int[][] indexColumnPositions, org.apache.derby.iapi.sql.dictionary.CatalogRowFactory::getIndexColumnCount(int):int, org.apache.derby.iapi.sql.dictionary.CatalogRowFactory::getIndexColumnPositions(int):int[]]
org.apache.derby.iapi.sql.dictionary.CatalogRowFactory	[org.apache.derby.iapi.sql.dictionary.CatalogRowFactory::java.lang.String[] indexNames, org.apache.derby.iapi.sql.dictionary.CatalogRowFactory::getIndexName(int):java.lang.String, org.apache.derby.iapi.sql.dictionary.CatalogRowFactory::boolean[] indexUniqueness, org.apache.derby.iapi.sql.dictionary.CatalogRowFactory::isIndexUnique(int):boolean, org.apache.derby.iapi.sql.dictionary.CatalogRowFactory::org.apache.derby.catalog.UUID tableUUID, org.apache.derby.iapi.sql.dictionary.CatalogRowFactory::org.apache.derby.catalog.UUID heapUUID, org.apache.derby.iapi.sql.dictionary.CatalogRowFactory::org.apache.derby.catalog.UUID[] indexUUID, org.apache.derby.iapi.sql.dictionary.CatalogRowFactory::getCanonicalIndexUUID(int):org.apache.derby.catalog.UUID, org.apache.derby.iapi.sql.dictionary.CatalogRowFactory::int columnCount, org.apache.derby.iapi.sql.dictionary.CatalogRowFactory::int indexCount, org.apache.derby.iapi.sql.dictionary.CatalogRowFactory::int[][] indexColumnPositions, org.apache.derby.iapi.sql.dictionary.CatalogRowFactory::getIndexColumnCount(int):int, org.apache.derby.iapi.sql.dictionary.CatalogRowFactory::getIndexColumnPositions(int):int[], org.apache.derby.iapi.sql.dictionary.CatalogRowFactory::boolean convertIdToLower, org.apache.derby.iapi.sql.dictionary.CatalogRowFactory::convertIdCase(java.lang.String):java.lang.String, org.apache.derby.iapi.sql.dictionary.CatalogRowFactory::getCanonicalHeapName():java.lang.String, org.apache.derby.iapi.sql.dictionary.CatalogRowFactory::generateIndexName(int):java.lang.String, org.apache.derby.iapi.sql.dictionary.CatalogRowFactory::initInfo(int, java.lang.String, int[][], boolean[], java.lang.String[]):void, org.apache.derby.iapi.sql.dictionary.CatalogRowFactory::java.lang.String catalogName]
org.apache.derby.iapi.types.SQLChar	[org.apache.derby.iapi.types.SQLChar::org.apache.derby.iapi.services.i18n.LocaleFinder localeFinder, org.apache.derby.iapi.types.SQLChar::getLocaleFinder():org.apache.derby.iapi.services.i18n.LocaleFinder, org.apache.derby.iapi.types.SQLChar::getLocale():java.util.Locale, org.apache.derby.iapi.types.SQLChar::getDateFormat():java.text.DateFormat, org.apache.derby.iapi.types.SQLChar::getTimeFormat():java.text.DateFormat, org.apache.derby.iapi.types.SQLChar::getTimestampFormat():java.text.DateFormat]
org.apache.derby.iapi.types.TypeId	[org.apache.derby.iapi.types.TypeId::boolean isFloatingPointTypeId, org.apache.derby.iapi.types.TypeId::boolean isRealTypeId, org.apache.derby.iapi.types.TypeId::isDoubleTypeId():boolean]
org.apache.derby.impl.db.BasicDatabase	[org.apache.derby.impl.db.BasicDatabase::java.lang.Object resourceAdapter, org.apache.derby.impl.db.BasicDatabase::bootResourceAdapter(boolean, java.util.Properties):void, org.apache.derby.impl.db.BasicDatabase::java.util.Properties allParams]
org.apache.derby.impl.jdbc.TransactionResourceImpl	[org.apache.derby.impl.jdbc.TransactionResourceImpl::org.apache.derby.iapi.services.context.ContextManager cm, org.apache.derby.impl.jdbc.TransactionResourceImpl::org.apache.derby.iapi.services.context.ContextService csf, org.apache.derby.impl.jdbc.TransactionResourceImpl::clearContextInError():void, org.apache.derby.impl.jdbc.TransactionResourceImpl::restoreContextStack():void, org.apache.derby.impl.jdbc.TransactionResourceImpl::setupContextStack():void]
org.apache.derby.impl.jdbc.TransactionResourceImpl	[org.apache.derby.impl.jdbc.TransactionResourceImpl::org.apache.derby.jdbc.InternalDriver driver, org.apache.derby.impl.jdbc.TransactionResourceImpl::isActive():boolean, org.apache.derby.impl.jdbc.TransactionResourceImpl::org.apache.derby.iapi.db.Database database, org.apache.derby.impl.jdbc.TransactionResourceImpl::setDatabase(org.apache.derby.iapi.db.Database):void]
org.apache.derby.impl.jdbc.TransactionResourceImpl	[org.apache.derby.impl.jdbc.TransactionResourceImpl::org.apache.derby.iapi.sql.conn.LanguageConnectionContext lcc, org.apache.derby.impl.jdbc.TransactionResourceImpl::clearLcc():void, org.apache.derby.impl.jdbc.TransactionResourceImpl::rollback():void, org.apache.derby.impl.jdbc.TransactionResourceImpl::isIdle():boolean]
org.apache.derby.impl.jdbc.TransactionResourceImpl	[org.apache.derby.impl.jdbc.TransactionResourceImpl::org.apache.derby.iapi.services.context.ContextManager cm, org.apache.derby.impl.jdbc.TransactionResourceImpl::org.apache.derby.iapi.services.context.ContextService csf, org.apache.derby.impl.jdbc.TransactionResourceImpl::clearContextInError():void, org.apache.derby.impl.jdbc.TransactionResourceImpl::restoreContextStack():void, org.apache.derby.impl.jdbc.TransactionResourceImpl::setupContextStack():void, org.apache.derby.impl.jdbc.TransactionResourceImpl::handleException(java.lang.Throwable, boolean, boolean):java.sql.SQLException, org.apache.derby.impl.jdbc.TransactionResourceImpl::cleanupOnError(java.lang.Throwable):boolean]
org.apache.derby.impl.jdbc.TransactionResourceImpl	[org.apache.derby.impl.jdbc.TransactionResourceImpl::org.apache.derby.iapi.services.context.ContextManager cm, org.apache.derby.impl.jdbc.TransactionResourceImpl::org.apache.derby.iapi.services.context.ContextService csf, org.apache.derby.impl.jdbc.TransactionResourceImpl::clearContextInError():void, org.apache.derby.impl.jdbc.TransactionResourceImpl::restoreContextStack():void, org.apache.derby.impl.jdbc.TransactionResourceImpl::setupContextStack():void, org.apache.derby.impl.jdbc.TransactionResourceImpl::handleException(java.lang.Throwable, boolean, boolean):java.sql.SQLException, org.apache.derby.impl.jdbc.TransactionResourceImpl::cleanupOnError(java.lang.Throwable):boolean, org.apache.derby.impl.jdbc.TransactionResourceImpl::java.lang.String username, org.apache.derby.impl.jdbc.TransactionResourceImpl::java.lang.String drdaID, org.apache.derby.impl.jdbc.TransactionResourceImpl::startTransaction():void, org.apache.derby.impl.jdbc.TransactionResourceImpl::org.apache.derby.jdbc.InternalDriver driver, org.apache.derby.impl.jdbc.TransactionResourceImpl::isActive():boolean, org.apache.derby.impl.jdbc.TransactionResourceImpl::org.apache.derby.iapi.db.Database database, org.apache.derby.impl.jdbc.TransactionResourceImpl::setDatabase(org.apache.derby.iapi.db.Database):void, org.apache.derby.impl.jdbc.TransactionResourceImpl::org.apache.derby.iapi.sql.conn.LanguageConnectionContext lcc, org.apache.derby.impl.jdbc.TransactionResourceImpl::clearLcc():void, org.apache.derby.impl.jdbc.TransactionResourceImpl::rollback():void, org.apache.derby.impl.jdbc.TransactionResourceImpl::isIdle():boolean]
org.apache.derby.impl.jdbc.TransactionResourceImpl	[org.apache.derby.impl.jdbc.TransactionResourceImpl::java.lang.String username, org.apache.derby.impl.jdbc.TransactionResourceImpl::java.lang.String drdaID, org.apache.derby.impl.jdbc.TransactionResourceImpl::startTransaction():void, org.apache.derby.impl.jdbc.TransactionResourceImpl::org.apache.derby.jdbc.InternalDriver driver, org.apache.derby.impl.jdbc.TransactionResourceImpl::isActive():boolean, org.apache.derby.impl.jdbc.TransactionResourceImpl::org.apache.derby.iapi.db.Database database, org.apache.derby.impl.jdbc.TransactionResourceImpl::setDatabase(org.apache.derby.iapi.db.Database):void, org.apache.derby.impl.jdbc.TransactionResourceImpl::org.apache.derby.iapi.sql.conn.LanguageConnectionContext lcc, org.apache.derby.impl.jdbc.TransactionResourceImpl::clearLcc():void, org.apache.derby.impl.jdbc.TransactionResourceImpl::rollback():void, org.apache.derby.impl.jdbc.TransactionResourceImpl::isIdle():boolean]
org.apache.derby.impl.services.locks.LockSet	[org.apache.derby.impl.services.locks.LockSet::boolean deadlockTrace, org.apache.derby.impl.services.locks.LockSet::java.util.Hashtable lockTraces, org.apache.derby.impl.services.locks.LockSet::setDeadlockTrace(boolean):void]
org.apache.derby.impl.services.locks.LockSet	[org.apache.derby.impl.services.locks.LockSet::int blockCount, org.apache.derby.impl.services.locks.LockSet::oneMoreWaiter():void, org.apache.derby.impl.services.locks.LockSet::oneLessWaiter():void, org.apache.derby.impl.services.locks.LockSet::anyoneBlocked():boolean]
org.apache.derby.impl.services.reflect.UpdateLoader	[org.apache.derby.impl.services.reflect.UpdateLoader::org.apache.derby.iapi.services.locks.LockFactory lf, org.apache.derby.impl.services.reflect.UpdateLoader::lockClassLoader(org.apache.derby.iapi.services.locks.ShExQual):boolean, org.apache.derby.impl.services.reflect.UpdateLoader::org.apache.derby.iapi.services.locks.ShExLockable classLoaderLock]
org.apache.derby.impl.services.uuid.BasicUUIDFactory	[org.apache.derby.impl.services.uuid.BasicUUIDFactory::long timemillis, org.apache.derby.impl.services.uuid.BasicUUIDFactory::long currentValue, org.apache.derby.impl.services.uuid.BasicUUIDFactory::resetCounters():void]
org.apache.derby.impl.sql.catalog.TabInfoImpl	[org.apache.derby.impl.sql.catalog.TabInfoImpl::boolean computedStreamStorableHeapColIds, org.apache.derby.impl.sql.catalog.TabInfoImpl::getStreamStorableHeapColIds(org.apache.derby.iapi.sql.execute.ExecRow):int[], org.apache.derby.impl.sql.catalog.TabInfoImpl::int[] streamStorableHeapColIds]
org.apache.derby.impl.sql.compile.AggregateNode	[org.apache.derby.impl.sql.compile.AggregateNode::org.apache.derby.impl.sql.compile.ResultColumn generatedRC, org.apache.derby.impl.sql.compile.AggregateNode::getGeneratedRC():org.apache.derby.impl.sql.compile.ResultColumn, org.apache.derby.impl.sql.compile.AggregateNode::org.apache.derby.impl.sql.compile.ColumnReference generatedRef, org.apache.derby.impl.sql.compile.AggregateNode::getGeneratedRef():org.apache.derby.impl.sql.compile.ColumnReference]
org.apache.derby.impl.sql.compile.CursorNode	[org.apache.derby.impl.sql.compile.CursorNode::java.util.Vector updatableColumns, org.apache.derby.impl.sql.compile.CursorNode::getUpdatableColumns():java.lang.String[], org.apache.derby.impl.sql.compile.CursorNode::getUpdateColumnNames():java.lang.String[]]
org.apache.derby.impl.sql.compile.FromBaseTable	[org.apache.derby.impl.sql.compile.FromBaseTable::int bulkFetch, org.apache.derby.impl.sql.compile.FromBaseTable::boolean bulkFetchTurnedOff, org.apache.derby.impl.sql.compile.FromBaseTable::disableBulkFetch():void]
org.apache.derby.impl.sql.compile.FromBaseTable	[org.apache.derby.impl.sql.compile.FromBaseTable::boolean gotRowCount, org.apache.derby.impl.sql.compile.FromBaseTable::baseRowCount():long, org.apache.derby.impl.sql.compile.FromBaseTable::long rowCount, org.apache.derby.impl.sql.compile.FromBaseTable::scanCostAfterSelectivity(double, double, double, boolean):double, org.apache.derby.impl.sql.compile.FromBaseTable::getStoreCostController(org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor):org.apache.derby.iapi.store.access.StoreCostController]
org.apache.derby.impl.sql.compile.ParserImpl	[org.apache.derby.impl.sql.compile.ParserImpl::java.lang.Object cachedTokenManager, org.apache.derby.impl.sql.compile.ParserImpl::getTokenManager():java.lang.Object, org.apache.derby.impl.sql.compile.ParserImpl::org.apache.derby.impl.sql.compile.CharStream charStream]
org.apache.derby.impl.sql.compile.ParserImpl	[org.apache.derby.impl.sql.compile.ParserImpl::java.lang.Object cachedParser, org.apache.derby.impl.sql.compile.ParserImpl::org.apache.derby.iapi.sql.compile.CompilerContext cc, org.apache.derby.impl.sql.compile.ParserImpl::getParser():java.lang.Object, org.apache.derby.impl.sql.compile.ParserImpl::parseGoalProduction(java.lang.String, java.lang.Object[]):org.apache.derby.impl.sql.compile.QueryTreeNode]
org.apache.derby.impl.sql.compile.TablePrivilegesNode	[org.apache.derby.impl.sql.compile.TablePrivilegesNode::boolean[] actionAllowed, org.apache.derby.impl.sql.compile.TablePrivilegesNode::org.apache.derby.impl.sql.compile.ResultColumnList[] columnLists, org.apache.derby.impl.sql.compile.TablePrivilegesNode::addAll():void, org.apache.derby.impl.sql.compile.TablePrivilegesNode::addAction(int, org.apache.derby.impl.sql.compile.ResultColumnList):void]
org.apache.derby.impl.sql.conn.GenericAuthorizer	[org.apache.derby.impl.sql.conn.GenericAuthorizer::org.apache.derby.iapi.sql.conn.LanguageConnectionContext lcc, org.apache.derby.impl.sql.conn.GenericAuthorizer::java.lang.String authorizationId, org.apache.derby.impl.sql.conn.GenericAuthorizer::userOnAccessList(java.lang.String):boolean, org.apache.derby.impl.sql.conn.GenericAuthorizer::getDefaultAccessLevel():int]
org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl	[org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl::int[] baseColumnMap, org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl::setCompactRow(org.apache.derby.iapi.sql.execute.ExecRow, org.apache.derby.iapi.sql.execute.ExecRow):org.apache.derby.iapi.sql.execute.ExecRow, org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl::setCompatRow(org.apache.derby.iapi.sql.execute.ExecRow, java.lang.Object[]):void]
org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl	[org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl::boolean statisticsTimingOn, org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl::getCurrentTimeMillis():long, org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl::getElapsedMillis(long):long]
org.apache.derby.impl.sql.execute.DMLWriteResultSet	[org.apache.derby.impl.sql.execute.DMLWriteResultSet::int[] baseRowReadMap, org.apache.derby.impl.sql.execute.DMLWriteResultSet::objectifyStreams(org.apache.derby.iapi.sql.execute.ExecRow):void, org.apache.derby.impl.sql.execute.DMLWriteResultSet::int[] streamStorableHeapColIds]
org.apache.derby.impl.sql.execute.GenericTriggerExecutor	[org.apache.derby.impl.sql.execute.GenericTriggerExecutor::org.apache.derby.iapi.sql.execute.ExecPreparedStatement ps, org.apache.derby.impl.sql.execute.GenericTriggerExecutor::org.apache.derby.iapi.sql.Activation spsActivation, org.apache.derby.impl.sql.execute.GenericTriggerExecutor::clearSPS():void]
org.apache.derby.impl.sql.execute.GenericTriggerExecutor	[org.apache.derby.impl.sql.execute.GenericTriggerExecutor::org.apache.derby.iapi.sql.conn.LanguageConnectionContext lcc, org.apache.derby.impl.sql.execute.GenericTriggerExecutor::boolean actionRetrieved, org.apache.derby.impl.sql.execute.GenericTriggerExecutor::org.apache.derby.iapi.sql.dictionary.SPSDescriptor action, org.apache.derby.impl.sql.execute.GenericTriggerExecutor::getAction():org.apache.derby.iapi.sql.dictionary.SPSDescriptor]
org.apache.derby.impl.sql.execute.GenericTriggerExecutor	[org.apache.derby.impl.sql.execute.GenericTriggerExecutor::boolean whenClauseRetrieved, org.apache.derby.impl.sql.execute.GenericTriggerExecutor::getWhenClause():org.apache.derby.iapi.sql.dictionary.SPSDescriptor, org.apache.derby.impl.sql.execute.GenericTriggerExecutor::org.apache.derby.iapi.sql.dictionary.SPSDescriptor whenClause]
org.apache.derby.impl.sql.execute.InsertConstantAction	[org.apache.derby.impl.sql.execute.InsertConstantAction::java.lang.String[] columnNames, org.apache.derby.impl.sql.execute.InsertConstantAction::getColumnName(int):java.lang.String, org.apache.derby.impl.sql.execute.InsertConstantAction::long[] autoincIncrement, org.apache.derby.impl.sql.execute.InsertConstantAction::getAutoincIncrement(int):long]
org.apache.derby.impl.sql.execute.InternalTriggerExecutionContext	[org.apache.derby.impl.sql.execute.InternalTriggerExecutionContext::org.apache.derby.iapi.sql.execute.ExecRow afterRow, org.apache.derby.impl.sql.execute.InternalTriggerExecutionContext::java.util.Vector aiCounters, org.apache.derby.impl.sql.execute.InternalTriggerExecutionContext::resetAICounters(boolean):void]
org.apache.derby.impl.sql.execute.InternalTriggerExecutionContext	[org.apache.derby.impl.sql.execute.InternalTriggerExecutionContext::org.apache.derby.iapi.sql.execute.ExecRow afterRow, org.apache.derby.impl.sql.execute.InternalTriggerExecutionContext::java.util.Vector aiCounters, org.apache.derby.impl.sql.execute.InternalTriggerExecutionContext::resetAICounters(boolean):void, org.apache.derby.impl.sql.execute.InternalTriggerExecutionContext::java.util.Hashtable aiHT, org.apache.derby.impl.sql.execute.InternalTriggerExecutionContext::copyHashtableToAIHT(java.util.Hashtable):void, org.apache.derby.impl.sql.execute.InternalTriggerExecutionContext::getAutoincrementValue(java.lang.String):java.lang.Long, org.apache.derby.impl.sql.execute.InternalTriggerExecutionContext::setAfterResultSet(org.apache.derby.iapi.sql.execute.CursorResultSet):void, org.apache.derby.impl.sql.execute.InternalTriggerExecutionContext::updateAICounters():void]
org.apache.derby.impl.sql.execute.NoPutResultSetImpl	[org.apache.derby.impl.sql.execute.NoPutResultSetImpl::int[] checkNullCols, org.apache.derby.impl.sql.execute.NoPutResultSetImpl::int cncLen, org.apache.derby.impl.sql.execute.NoPutResultSetImpl::skipScan(org.apache.derby.iapi.sql.execute.ExecIndexRow, org.apache.derby.iapi.sql.execute.ExecIndexRow):boolean, org.apache.derby.impl.sql.execute.NoPutResultSetImpl::skipRow(org.apache.derby.iapi.sql.execute.ExecRow):boolean]
org.apache.derby.impl.sql.execute.SqlXmlExecutor	[org.apache.derby.impl.sql.execute.SqlXmlExecutor::org.apache.derby.iapi.sql.Activation activation, org.apache.derby.impl.sql.execute.SqlXmlExecutor::getSqlXmlUtil():org.apache.derby.iapi.types.SqlXmlUtil, org.apache.derby.impl.sql.execute.SqlXmlExecutor::int sqlXUtilId]
org.apache.derby.impl.sql.execute.UpdateStatisticsConstantAction	[org.apache.derby.impl.sql.execute.UpdateStatisticsConstantAction::org.apache.derby.iapi.types.DataValueDescriptor[][] rowBufferArray, org.apache.derby.impl.sql.execute.UpdateStatisticsConstantAction::org.apache.derby.iapi.types.DataValueDescriptor[] lastUniqueKey, org.apache.derby.impl.sql.execute.UpdateStatisticsConstantAction::initializeRowBuffers(org.apache.derby.iapi.sql.execute.ExecIndexRow):void, org.apache.derby.impl.sql.execute.UpdateStatisticsConstantAction::compareWithPrevKey(int, boolean):int]
org.apache.derby.impl.store.access.PropertyConglomerate	[org.apache.derby.impl.store.access.PropertyConglomerate::org.apache.derby.iapi.services.locks.LockFactory lf, org.apache.derby.impl.store.access.PropertyConglomerate::org.apache.derby.impl.store.access.CacheLock cachedLock, org.apache.derby.impl.store.access.PropertyConglomerate::lockProperties(org.apache.derby.iapi.store.access.TransactionController):void, org.apache.derby.impl.store.access.PropertyConglomerate::iHoldTheUpdateLock(org.apache.derby.iapi.store.access.TransactionController):boolean]
org.apache.derby.impl.store.access.PropertyConglomerate	[org.apache.derby.impl.store.access.PropertyConglomerate::java.util.Properties serviceProperties, org.apache.derby.impl.store.access.PropertyConglomerate::saveServiceProperty(java.lang.String, java.io.Serializable):boolean, org.apache.derby.impl.store.access.PropertyConglomerate::bootPasswordChange(org.apache.derby.iapi.store.access.TransactionController, java.lang.String, java.io.Serializable):boolean]
org.apache.derby.impl.store.access.conglomerate.BinaryOrderableWrapper	[org.apache.derby.impl.store.access.conglomerate.BinaryOrderableWrapper::org.apache.derby.iapi.store.access.BinaryOrderable ref_object, org.apache.derby.impl.store.access.conglomerate.BinaryOrderableWrapper::org.apache.derby.iapi.store.access.BinaryOrderable other_object, org.apache.derby.impl.store.access.conglomerate.BinaryOrderableWrapper::init(org.apache.derby.iapi.store.access.BinaryOrderable, org.apache.derby.iapi.store.access.BinaryOrderable):void]
org.apache.derby.impl.store.raw.data.EncryptData	[org.apache.derby.impl.store.raw.data.EncryptData::org.apache.derby.io.StorageFactory storageFactory, org.apache.derby.impl.store.raw.data.EncryptData::getFile(org.apache.derby.iapi.store.raw.ContainerKey, boolean):org.apache.derby.io.StorageFile, org.apache.derby.impl.store.raw.data.EncryptData::getFile(java.lang.String):org.apache.derby.io.StorageFile, org.apache.derby.impl.store.raw.data.EncryptData::getFilePath(org.apache.derby.iapi.store.raw.ContainerKey, boolean):java.lang.String]
org.apache.derby.impl.store.raw.data.StoredRecordHeader	[org.apache.derby.impl.store.raw.data.StoredRecordHeader::int status, org.apache.derby.impl.store.raw.data.StoredRecordHeader::hasOverflow():boolean, org.apache.derby.impl.store.raw.data.StoredRecordHeader::hasFirstField():boolean, org.apache.derby.impl.store.raw.data.StoredRecordHeader::isDeleted():boolean, org.apache.derby.impl.store.raw.data.StoredRecordHeader::setDeleted(boolean):int]
org.apache.derby.impl.store.raw.log.LogAccessFile	[org.apache.derby.impl.store.raw.log.LogAccessFile::org.apache.derby.io.StorageRandomAccessFile log, org.apache.derby.impl.store.raw.log.LogAccessFile::java.lang.Object logFileSemaphore, org.apache.derby.impl.store.raw.log.LogAccessFile::writeToLog(byte[], int, int):void, org.apache.derby.impl.store.raw.log.LogAccessFile::corrupt():void, org.apache.derby.impl.store.raw.log.LogAccessFile::syncLogAccessFile():void]
org.apache.derby.impl.store.raw.log.LogToFile	[org.apache.derby.impl.store.raw.log.LogToFile::boolean logNotSynced, org.apache.derby.impl.store.raw.log.LogToFile::logErrMsgForDurabilityTestModeNoSync():void, org.apache.derby.impl.store.raw.log.LogToFile::logErrMsg(java.lang.String):void]
org.apache.derby.impl.store.raw.log.LogToFile	[org.apache.derby.impl.store.raw.log.LogToFile::int test_logWritten, org.apache.derby.impl.store.raw.log.LogToFile::testLogFull():void, org.apache.derby.impl.store.raw.log.LogToFile::int test_numRecordToFillLog, org.apache.derby.impl.store.raw.log.LogToFile::initLogFile(org.apache.derby.io.StorageRandomAccessFile, long, long):boolean]
org.apache.derby.jdbc.EmbeddedDataSource	[org.apache.derby.jdbc.EmbeddedDataSource::java.lang.String createDatabase, org.apache.derby.jdbc.EmbeddedDataSource::setCreateDatabase(java.lang.String):void, org.apache.derby.jdbc.EmbeddedDataSource::java.lang.String shutdownDatabase, org.apache.derby.jdbc.EmbeddedDataSource::setShutdownDatabase(java.lang.String):void]
org.apache.derby.iapi.services.classfile.ClassEnumeration	[org.apache.derby.iapi.services.classfile.ClassEnumeration::findMethodReferences(java.util.Enumeration, java.util.HashSet):void, org.apache.derby.iapi.services.classfile.ClassEnumeration::findFieldReferences(java.util.Enumeration, java.util.HashSet):void, org.apache.derby.iapi.services.classfile.ClassEnumeration::distillClasses(java.lang.String, java.util.HashSet):void]
org.apache.derby.iapi.services.classfile.ClassEnumeration	[org.apache.derby.iapi.services.classfile.ClassEnumeration::org.apache.derby.iapi.services.classfile.ClassHolder cpt, org.apache.derby.iapi.services.classfile.ClassEnumeration::java.util.Enumeration inner, org.apache.derby.iapi.services.classfile.ClassEnumeration::findClassReferences(java.util.HashSet):void]
org.apache.derby.iapi.sql.dictionary.TableDescriptor	[org.apache.derby.iapi.sql.dictionary.TableDescriptor::org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList constraintDescriptorList, org.apache.derby.iapi.sql.dictionary.TableDescriptor::emptyConstraintDescriptorList():void, org.apache.derby.iapi.sql.dictionary.TableDescriptor::removeConstraintDescriptor(org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor):void]
org.apache.derby.iapi.types.SqlXmlUtil	[org.apache.derby.iapi.types.SqlXmlUtil::org.apache.xalan.serialize.Serializer serializer, org.apache.derby.iapi.types.SqlXmlUtil::loadSerializer():void, org.apache.derby.iapi.types.SqlXmlUtil::serializeToString(java.util.ArrayList, org.apache.derby.iapi.types.XMLDataValue):java.lang.String]
org.apache.derby.impl.jdbc.LOBFile	[org.apache.derby.impl.jdbc.LOBFile::org.apache.derby.io.StorageRandomAccessFile randomAccessFile, org.apache.derby.impl.jdbc.LOBFile::write(int):void, org.apache.derby.impl.jdbc.LOBFile::write(byte[], int, int):void, org.apache.derby.impl.jdbc.LOBFile::readByte():int, org.apache.derby.impl.jdbc.LOBFile::write(byte[]):void]
org.apache.derby.impl.load.ControlInfo	[org.apache.derby.impl.load.ControlInfo::mapFromUserFriendlyFieldDelimiters(java.lang.String):java.lang.String, org.apache.derby.impl.load.ControlInfo::commonToFieldAndRecordDelimiters(java.lang.String, java.lang.String, char):java.lang.String, org.apache.derby.impl.load.ControlInfo::mapFromUserFriendlyRecordDelimiters(java.lang.String):java.lang.String]
org.apache.derby.impl.services.daemon.ServiceRecord	[org.apache.derby.impl.services.daemon.ServiceRecord::boolean serviceRequest, org.apache.derby.impl.services.daemon.ServiceRecord::serviced():void, org.apache.derby.impl.services.daemon.ServiceRecord::called():void]
org.apache.derby.impl.sql.compile.Predicate	[org.apache.derby.impl.sql.compile.Predicate::java.util.Hashtable searchClauseHT, org.apache.derby.impl.sql.compile.Predicate::transitiveSearchClauseAdded(org.apache.derby.impl.sql.compile.RelationalOperator):boolean, org.apache.derby.impl.sql.compile.Predicate::setTransitiveSearchClauseAdded(org.apache.derby.impl.sql.compile.RelationalOperator):void]
org.apache.derby.impl.sql.compile.QueryTreeNode	[org.apache.derby.impl.sql.compile.QueryTreeNode::boolean isPrivilegeCollectionRequired, org.apache.derby.impl.sql.compile.QueryTreeNode::disablePrivilegeCollection():void, org.apache.derby.impl.sql.compile.QueryTreeNode::isPrivilegeCollectionRequired():boolean]
org.apache.derby.impl.sql.compile.QueryTreeNode	[org.apache.derby.impl.sql.compile.QueryTreeNode::org.apache.derby.iapi.services.context.ContextManager cm, org.apache.derby.impl.sql.compile.QueryTreeNode::setContextManager(org.apache.derby.iapi.services.context.ContextManager):void, org.apache.derby.impl.sql.compile.QueryTreeNode::getContextManager():org.apache.derby.iapi.services.context.ContextManager, org.apache.derby.impl.sql.compile.QueryTreeNode::org.apache.derby.iapi.sql.conn.LanguageConnectionContext lcc, org.apache.derby.impl.sql.compile.QueryTreeNode::getLanguageConnectionContext():org.apache.derby.iapi.sql.conn.LanguageConnectionContext, org.apache.derby.impl.sql.compile.QueryTreeNode::getCompilerContext():org.apache.derby.iapi.sql.compile.CompilerContext, org.apache.derby.impl.sql.compile.QueryTreeNode::getDataDictionary():org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.QueryTreeNode::getTableDescriptor(java.lang.String, org.apache.derby.iapi.sql.dictionary.SchemaDescriptor):org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.impl.sql.compile.QueryTreeNode::getNodeFactory():org.apache.derby.iapi.sql.compile.NodeFactory, org.apache.derby.impl.sql.compile.QueryTreeNode::getExecutionFactory():org.apache.derby.iapi.sql.execute.ExecutionFactory, org.apache.derby.impl.sql.compile.QueryTreeNode::getClassFactory():org.apache.derby.iapi.services.loader.ClassFactory, org.apache.derby.impl.sql.compile.QueryTreeNode::getParameterTypes():org.apache.derby.iapi.types.DataTypeDescriptor[], org.apache.derby.impl.sql.compile.QueryTreeNode::getDependencyManager():org.apache.derby.iapi.sql.depend.DependencyManager, org.apache.derby.impl.sql.compile.QueryTreeNode::makeTableName(java.lang.String, java.lang.String):org.apache.derby.impl.sql.compile.TableName, org.apache.derby.impl.sql.compile.QueryTreeNode::getSchemaDescriptor(java.lang.String, boolean):org.apache.derby.iapi.sql.dictionary.SchemaDescriptor, org.apache.derby.impl.sql.compile.QueryTreeNode::resolveTableToSynonym(org.apache.derby.impl.sql.compile.TableName):org.apache.derby.impl.sql.compile.TableName, org.apache.derby.impl.sql.compile.QueryTreeNode::getTypeCompiler(org.apache.derby.iapi.types.TypeId):org.apache.derby.iapi.sql.compile.TypeCompiler, org.apache.derby.impl.sql.compile.QueryTreeNode::org.apache.derby.impl.sql.execute.GenericConstantActionFactory constantActionFactory, org.apache.derby.impl.sql.compile.QueryTreeNode::getGenericConstantActionFactory():org.apache.derby.impl.sql.execute.GenericConstantActionFactory, org.apache.derby.impl.sql.compile.QueryTreeNode::parseQueryText(org.apache.derby.iapi.sql.compile.CompilerContext, java.lang.String, java.lang.Object[], org.apache.derby.iapi.sql.conn.LanguageConnectionContext):org.apache.derby.impl.sql.compile.QueryTreeNode, org.apache.derby.impl.sql.compile.QueryTreeNode::verifyClassExist(java.lang.String, boolean):java.lang.String, org.apache.derby.impl.sql.compile.QueryTreeNode::isSessionSchema(java.lang.String):boolean, org.apache.derby.impl.sql.compile.QueryTreeNode::getNullNode(org.apache.derby.iapi.types.TypeId, org.apache.derby.iapi.services.context.ContextManager):org.apache.derby.impl.sql.compile.ConstantNode]
org.apache.derby.impl.sql.compile.QueryTreeNode	[org.apache.derby.impl.sql.compile.QueryTreeNode::org.apache.derby.iapi.services.context.ContextManager cm, org.apache.derby.impl.sql.compile.QueryTreeNode::setContextManager(org.apache.derby.iapi.services.context.ContextManager):void, org.apache.derby.impl.sql.compile.QueryTreeNode::getContextManager():org.apache.derby.iapi.services.context.ContextManager, org.apache.derby.impl.sql.compile.QueryTreeNode::org.apache.derby.iapi.sql.conn.LanguageConnectionContext lcc, org.apache.derby.impl.sql.compile.QueryTreeNode::getLanguageConnectionContext():org.apache.derby.iapi.sql.conn.LanguageConnectionContext, org.apache.derby.impl.sql.compile.QueryTreeNode::getCompilerContext():org.apache.derby.iapi.sql.compile.CompilerContext, org.apache.derby.impl.sql.compile.QueryTreeNode::getDataDictionary():org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.QueryTreeNode::getTableDescriptor(java.lang.String, org.apache.derby.iapi.sql.dictionary.SchemaDescriptor):org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.impl.sql.compile.QueryTreeNode::getNodeFactory():org.apache.derby.iapi.sql.compile.NodeFactory, org.apache.derby.impl.sql.compile.QueryTreeNode::getExecutionFactory():org.apache.derby.iapi.sql.execute.ExecutionFactory, org.apache.derby.impl.sql.compile.QueryTreeNode::getClassFactory():org.apache.derby.iapi.services.loader.ClassFactory, org.apache.derby.impl.sql.compile.QueryTreeNode::getParameterTypes():org.apache.derby.iapi.types.DataTypeDescriptor[], org.apache.derby.impl.sql.compile.QueryTreeNode::getDependencyManager():org.apache.derby.iapi.sql.depend.DependencyManager, org.apache.derby.impl.sql.compile.QueryTreeNode::makeTableName(java.lang.String, java.lang.String):org.apache.derby.impl.sql.compile.TableName, org.apache.derby.impl.sql.compile.QueryTreeNode::getSchemaDescriptor(java.lang.String, boolean):org.apache.derby.iapi.sql.dictionary.SchemaDescriptor, org.apache.derby.impl.sql.compile.QueryTreeNode::resolveTableToSynonym(org.apache.derby.impl.sql.compile.TableName):org.apache.derby.impl.sql.compile.TableName, org.apache.derby.impl.sql.compile.QueryTreeNode::getTypeCompiler(org.apache.derby.iapi.types.TypeId):org.apache.derby.iapi.sql.compile.TypeCompiler]
org.apache.derby.impl.sql.compile.QueryTreeNode	[org.apache.derby.impl.sql.compile.QueryTreeNode::org.apache.derby.iapi.services.context.ContextManager cm, org.apache.derby.impl.sql.compile.QueryTreeNode::setContextManager(org.apache.derby.iapi.services.context.ContextManager):void, org.apache.derby.impl.sql.compile.QueryTreeNode::getContextManager():org.apache.derby.iapi.services.context.ContextManager, org.apache.derby.impl.sql.compile.QueryTreeNode::org.apache.derby.iapi.sql.conn.LanguageConnectionContext lcc, org.apache.derby.impl.sql.compile.QueryTreeNode::getLanguageConnectionContext():org.apache.derby.iapi.sql.conn.LanguageConnectionContext, org.apache.derby.impl.sql.compile.QueryTreeNode::getCompilerContext():org.apache.derby.iapi.sql.compile.CompilerContext, org.apache.derby.impl.sql.compile.QueryTreeNode::getDataDictionary():org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.QueryTreeNode::getTableDescriptor(java.lang.String, org.apache.derby.iapi.sql.dictionary.SchemaDescriptor):org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.impl.sql.compile.QueryTreeNode::getNodeFactory():org.apache.derby.iapi.sql.compile.NodeFactory, org.apache.derby.impl.sql.compile.QueryTreeNode::getExecutionFactory():org.apache.derby.iapi.sql.execute.ExecutionFactory, org.apache.derby.impl.sql.compile.QueryTreeNode::getClassFactory():org.apache.derby.iapi.services.loader.ClassFactory, org.apache.derby.impl.sql.compile.QueryTreeNode::getParameterTypes():org.apache.derby.iapi.types.DataTypeDescriptor[], org.apache.derby.impl.sql.compile.QueryTreeNode::getDependencyManager():org.apache.derby.iapi.sql.depend.DependencyManager, org.apache.derby.impl.sql.compile.QueryTreeNode::makeTableName(java.lang.String, java.lang.String):org.apache.derby.impl.sql.compile.TableName]
org.apache.derby.impl.sql.compile.QueryTreeNode	[org.apache.derby.impl.sql.compile.QueryTreeNode::org.apache.derby.iapi.services.context.ContextManager cm, org.apache.derby.impl.sql.compile.QueryTreeNode::setContextManager(org.apache.derby.iapi.services.context.ContextManager):void, org.apache.derby.impl.sql.compile.QueryTreeNode::getContextManager():org.apache.derby.iapi.services.context.ContextManager, org.apache.derby.impl.sql.compile.QueryTreeNode::org.apache.derby.iapi.sql.conn.LanguageConnectionContext lcc, org.apache.derby.impl.sql.compile.QueryTreeNode::getLanguageConnectionContext():org.apache.derby.iapi.sql.conn.LanguageConnectionContext, org.apache.derby.impl.sql.compile.QueryTreeNode::getCompilerContext():org.apache.derby.iapi.sql.compile.CompilerContext, org.apache.derby.impl.sql.compile.QueryTreeNode::getDataDictionary():org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.QueryTreeNode::getTableDescriptor(java.lang.String, org.apache.derby.iapi.sql.dictionary.SchemaDescriptor):org.apache.derby.iapi.sql.dictionary.TableDescriptor]
org.apache.derby.impl.sql.compile.ValueNode	[org.apache.derby.impl.sql.compile.ValueNode::boolean transformed, org.apache.derby.impl.sql.compile.ValueNode::setTransformed():void, org.apache.derby.impl.sql.compile.ValueNode::selectivity(org.apache.derby.iapi.sql.compile.Optimizable):double]
org.apache.derby.impl.sql.compile.ValueNode	[org.apache.derby.impl.sql.compile.ValueNode::getTablesReferenced():org.apache.derby.iapi.util.JBitSet, org.apache.derby.impl.sql.compile.ValueNode::checkTopPredicatesForEqualsConditions(int, boolean[], int[], org.apache.derby.iapi.util.JBitSet[], boolean):void, org.apache.derby.impl.sql.compile.ValueNode::updateMaps(org.apache.derby.iapi.util.JBitSet[], boolean[], int[], int, int, org.apache.derby.impl.sql.compile.ValueNode, org.apache.derby.impl.sql.compile.ValueNode):void, org.apache.derby.impl.sql.compile.ValueNode::setValueCols(org.apache.derby.iapi.util.JBitSet[], boolean[], int, int):void, org.apache.derby.impl.sql.compile.ValueNode::isRelationalOperator():boolean, org.apache.derby.impl.sql.compile.ValueNode::requiresTypeFromContext():boolean]
org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext	[org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext::org.apache.derby.iapi.services.cache.CacheManager statementCache, org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext::getCacheSize():int, org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext::emptyCache():void, org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext::removeStatement(org.apache.derby.iapi.sql.Statement):void]
org.apache.derby.impl.store.access.RAMAccessManager	[org.apache.derby.impl.store.access.RAMAccessManager::org.apache.derby.iapi.services.cache.CacheManager conglom_cache, org.apache.derby.impl.store.access.RAMAccessManager::conglomCacheInit():void, org.apache.derby.impl.store.access.RAMAccessManager::conglomCacheInvalidate():void]
org.apache.derby.impl.sql.execute.IndexChanger	[org.apache.derby.impl.sql.execute.IndexChanger::org.apache.derby.iapi.sql.dictionary.IndexRowGenerator irg, org.apache.derby.impl.sql.execute.IndexChanger::org.apache.derby.iapi.services.io.FormatableBitSet baseRowReadMap, org.apache.derby.impl.sql.execute.IndexChanger::insertForUpdate(org.apache.derby.iapi.sql.execute.ExecRow, org.apache.derby.iapi.types.RowLocation):void, org.apache.derby.impl.sql.execute.IndexChanger::org.apache.derby.iapi.sql.execute.ExecIndexRow ourIndexRow, org.apache.derby.impl.sql.execute.IndexChanger::update(org.apache.derby.iapi.sql.execute.ExecRow, org.apache.derby.iapi.sql.execute.ExecRow, org.apache.derby.iapi.types.RowLocation):void, org.apache.derby.impl.sql.execute.IndexChanger::delete(org.apache.derby.iapi.sql.execute.ExecRow, org.apache.derby.iapi.types.RowLocation):void, org.apache.derby.impl.sql.execute.IndexChanger::org.apache.derby.iapi.store.access.ScanController indexSC, org.apache.derby.impl.sql.execute.IndexChanger::boolean ownIndexSC, org.apache.derby.impl.sql.execute.IndexChanger::closeIndexSC():void, org.apache.derby.impl.sql.execute.IndexChanger::long indexCID, org.apache.derby.impl.sql.execute.IndexChanger::org.apache.derby.iapi.store.access.DynamicCompiledOpenConglomInfo indexDCOCI, org.apache.derby.impl.sql.execute.IndexChanger::org.apache.derby.iapi.store.access.StaticCompiledOpenConglomInfo indexSCOCI, org.apache.derby.impl.sql.execute.IndexChanger::org.apache.derby.iapi.store.access.TransactionController tc, org.apache.derby.impl.sql.execute.IndexChanger::int lockMode, org.apache.derby.impl.sql.execute.IndexChanger::int isolationLevel, org.apache.derby.impl.sql.execute.IndexChanger::org.apache.derby.iapi.store.access.ConglomerateController indexCC, org.apache.derby.impl.sql.execute.IndexChanger::closeIndexCC():void, org.apache.derby.impl.sql.execute.IndexChanger::org.apache.derby.iapi.sql.Activation activation, org.apache.derby.impl.sql.execute.IndexChanger::setOurIndexRow(org.apache.derby.iapi.sql.execute.ExecRow, org.apache.derby.iapi.types.RowLocation):void, org.apache.derby.impl.sql.execute.IndexChanger::getDeferredIndexRowTemplate(org.apache.derby.iapi.sql.execute.ExecRow, org.apache.derby.iapi.types.RowLocation):org.apache.derby.iapi.sql.execute.ExecIndexRow, org.apache.derby.impl.sql.execute.IndexChanger::setOurUpdatedIndexRow(org.apache.derby.iapi.sql.execute.ExecRow, org.apache.derby.iapi.types.RowLocation):void, org.apache.derby.impl.sql.execute.IndexChanger::org.apache.derby.iapi.sql.execute.ExecIndexRow ourUpdatedIndexRow, org.apache.derby.impl.sql.execute.IndexChanger::indexRowChanged():boolean, org.apache.derby.impl.sql.execute.IndexChanger::insert(org.apache.derby.iapi.sql.execute.ExecRow, org.apache.derby.iapi.types.RowLocation):void, org.apache.derby.impl.sql.execute.IndexChanger::java.lang.String indexName, org.apache.derby.impl.sql.execute.IndexChanger::org.apache.derby.impl.sql.execute.TemporaryRowHolderImpl rowHolder, org.apache.derby.impl.sql.execute.IndexChanger::boolean rowHolderPassedIn, org.apache.derby.impl.sql.execute.IndexChanger::setRowHolder(org.apache.derby.impl.sql.execute.TemporaryRowHolderImpl):void, org.apache.derby.impl.sql.execute.IndexChanger::close():void, org.apache.derby.impl.sql.execute.IndexChanger::doDeferredInsert():void, org.apache.derby.impl.sql.execute.IndexChanger::finish():void, org.apache.derby.impl.sql.execute.IndexChanger::org.apache.derby.iapi.store.access.ConglomerateController baseCC, org.apache.derby.impl.sql.execute.IndexChanger::setScan():void, org.apache.derby.impl.sql.execute.IndexChanger::openIndexCC():org.apache.derby.iapi.store.access.ConglomerateController, org.apache.derby.impl.sql.execute.IndexChanger::doDelete():void, org.apache.derby.impl.sql.execute.IndexChanger::insertAndCheckDups(org.apache.derby.iapi.sql.execute.ExecIndexRow):void]
org.apache.derby.iapi.store.access.DiskHashtable	[org.apache.derby.iapi.store.access.DiskHashtable::long rowConglomerateId, org.apache.derby.iapi.store.access.DiskHashtable::org.apache.derby.iapi.store.access.ConglomerateController rowConglomerate, org.apache.derby.iapi.store.access.DiskHashtable::long btreeConglomerateId, org.apache.derby.iapi.store.access.DiskHashtable::org.apache.derby.iapi.store.access.TransactionController tc, org.apache.derby.iapi.store.access.DiskHashtable::org.apache.derby.iapi.store.access.ConglomerateController btreeConglomerate, org.apache.derby.iapi.store.access.DiskHashtable::org.apache.derby.iapi.types.DataValueDescriptor[] btreeRow, org.apache.derby.iapi.store.access.DiskHashtable::boolean remove_duplicates, org.apache.derby.iapi.store.access.DiskHashtable::int size, org.apache.derby.iapi.store.access.DiskHashtable::put(java.lang.Object, java.lang.Object[]):boolean, org.apache.derby.iapi.store.access.DiskHashtable::getRemove(java.lang.Object, boolean, boolean):java.lang.Object, org.apache.derby.iapi.store.access.DiskHashtable::org.apache.derby.iapi.types.DataValueDescriptor[] scanKey, org.apache.derby.iapi.store.access.DiskHashtable::org.apache.derby.iapi.types.DataValueDescriptor[] row, org.apache.derby.iapi.store.access.DiskHashtable::boolean keepStatistics, org.apache.derby.iapi.store.access.DiskHashtable::close():void]
org.apache.derby.impl.store.access.conglomerate.OpenConglomerate	[org.apache.derby.impl.store.access.conglomerate.OpenConglomerate::org.apache.derby.iapi.store.access.conglomerate.Conglomerate init_conglomerate, org.apache.derby.impl.store.access.conglomerate.OpenConglomerate::getConglomerate():org.apache.derby.iapi.store.access.conglomerate.Conglomerate, org.apache.derby.impl.store.access.conglomerate.OpenConglomerate::org.apache.derby.iapi.store.raw.LockingPolicy init_locking_policy, org.apache.derby.impl.store.access.conglomerate.OpenConglomerate::int init_openmode, org.apache.derby.impl.store.access.conglomerate.OpenConglomerate::getOpenMode():int, org.apache.derby.impl.store.access.conglomerate.OpenConglomerate::org.apache.derby.iapi.store.raw.Transaction init_rawtran, org.apache.derby.impl.store.access.conglomerate.OpenConglomerate::boolean forUpdate, org.apache.derby.impl.store.access.conglomerate.OpenConglomerate::isForUpdate():boolean, org.apache.derby.impl.store.access.conglomerate.OpenConglomerate::org.apache.derby.iapi.store.raw.ContainerHandle container, org.apache.derby.impl.store.access.conglomerate.OpenConglomerate::getRawTran():org.apache.derby.iapi.store.raw.Transaction, org.apache.derby.impl.store.access.conglomerate.OpenConglomerate::org.apache.derby.iapi.store.access.DynamicCompiledOpenConglomInfo init_dynamic_info, org.apache.derby.impl.store.access.conglomerate.OpenConglomerate::boolean getBaseTableLocks, org.apache.derby.impl.store.access.conglomerate.OpenConglomerate::org.apache.derby.iapi.store.access.conglomerate.TransactionManager init_xact_manager, org.apache.derby.impl.store.access.conglomerate.OpenConglomerate::getXactMgr():org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.impl.store.access.conglomerate.OpenConglomerate::int init_lock_level, org.apache.derby.impl.store.access.conglomerate.OpenConglomerate::isTableLocked():boolean, org.apache.derby.impl.store.access.conglomerate.OpenConglomerate::boolean init_hold, org.apache.derby.impl.store.access.conglomerate.OpenConglomerate::getHold():boolean, org.apache.derby.impl.store.access.conglomerate.OpenConglomerate::boolean useUpdateLocks, org.apache.derby.impl.store.access.conglomerate.OpenConglomerate::isUseUpdateLocks():boolean, org.apache.derby.impl.store.access.conglomerate.OpenConglomerate::init(org.apache.derby.iapi.store.raw.ContainerHandle, org.apache.derby.iapi.store.access.conglomerate.Conglomerate, int[], org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.iapi.store.raw.Transaction, boolean, int, int, org.apache.derby.iapi.store.raw.LockingPolicy, org.apache.derby.iapi.store.access.DynamicCompiledOpenConglomInfo):org.apache.derby.iapi.store.raw.ContainerHandle, org.apache.derby.impl.store.access.conglomerate.OpenConglomerate::reopen():org.apache.derby.iapi.store.raw.ContainerHandle]
org.apache.derby.impl.load.ExportResultSetForObject	[org.apache.derby.impl.load.ExportResultSetForObject::java.sql.Connection con, org.apache.derby.impl.load.ExportResultSetForObject::java.lang.String selectQuery, org.apache.derby.impl.load.ExportResultSetForObject::java.sql.ResultSet rs, org.apache.derby.impl.load.ExportResultSetForObject::getResultSet():java.sql.ResultSet, org.apache.derby.impl.load.ExportResultSetForObject::int[] columnLengths, org.apache.derby.impl.load.ExportResultSetForObject::getMetaDataInfo():void, org.apache.derby.impl.load.ExportResultSetForObject::int columnCount, org.apache.derby.impl.load.ExportResultSetForObject::java.lang.String[] columnNames, org.apache.derby.impl.load.ExportResultSetForObject::java.lang.String[] columnTypes]
org.apache.derby.impl.load.ExportResultSetForObject	[org.apache.derby.impl.load.ExportResultSetForObject::java.sql.Connection con, org.apache.derby.impl.load.ExportResultSetForObject::java.lang.String selectQuery, org.apache.derby.impl.load.ExportResultSetForObject::java.sql.ResultSet rs, org.apache.derby.impl.load.ExportResultSetForObject::getResultSet():java.sql.ResultSet]
org.apache.derby.impl.services.jce.JCECipherFactory	[org.apache.derby.impl.services.jce.JCECipherFactory::int keyLengthBits, org.apache.derby.impl.services.jce.JCECipherFactory::java.lang.String cryptoAlgorithm, org.apache.derby.impl.services.jce.JCECipherFactory::createNewCipher(int, javax.crypto.SecretKey, byte[]):org.apache.derby.iapi.services.crypto.CipherProvider, org.apache.derby.impl.services.jce.JCECipherFactory::java.lang.String cryptoProviderShort, org.apache.derby.impl.services.jce.JCECipherFactory::generateUniqueBytes():byte[]]
org.apache.derby.impl.services.jce.JCECipherFactory	[org.apache.derby.impl.services.jce.JCECipherFactory::java.security.MessageDigest messageDigest, org.apache.derby.impl.services.jce.JCECipherFactory::digest(byte[]):int, org.apache.derby.impl.services.jce.JCECipherFactory::saveSecretKey(byte[], byte[]):java.lang.String]
org.apache.derby.impl.store.raw.log.FlushedScan	[org.apache.derby.impl.store.raw.log.FlushedScan::org.apache.derby.io.StorageRandomAccessFile scan, org.apache.derby.impl.store.raw.log.FlushedScan::int nextRecordLength, org.apache.derby.impl.store.raw.log.FlushedScan::boolean readNextRecordLength, org.apache.derby.impl.store.raw.log.FlushedScan::currentLogFileHasUnflushedRecord():boolean]
org.apache.derby.iapi.jdbc.DRDAServerStarter	[org.apache.derby.iapi.jdbc.DRDAServerStarter::java.lang.String userArg, org.apache.derby.iapi.jdbc.DRDAServerStarter::java.lang.String passwordArg, org.apache.derby.iapi.jdbc.DRDAServerStarter::setStartInfo(java.net.InetAddress, int, java.lang.String, java.lang.String, java.io.PrintWriter):void]
org.apache.derby.iapi.services.classfile.MemberTable	[org.apache.derby.iapi.services.classfile.MemberTable::java.util.Hashtable hashtable, org.apache.derby.iapi.services.classfile.MemberTable::addEntry(org.apache.derby.iapi.services.classfile.ClassMember):void, org.apache.derby.iapi.services.classfile.MemberTable::org.apache.derby.iapi.services.classfile.MemberTableHash mutableMTH, org.apache.derby.iapi.services.classfile.MemberTable::find(java.lang.String, java.lang.String):org.apache.derby.iapi.services.classfile.ClassMember]
org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator	[org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator::org.apache.derby.iapi.services.uuid.UUIDFactory uuidf, org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator::getUUIDFactory():org.apache.derby.iapi.services.uuid.UUIDFactory, org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator::newFileInfoDescriptor(org.apache.derby.catalog.UUID, org.apache.derby.iapi.sql.dictionary.SchemaDescriptor, java.lang.String, long):org.apache.derby.iapi.sql.dictionary.FileInfoDescriptor]
org.apache.derby.impl.jdbc.UpdatableBlobStream	[org.apache.derby.impl.jdbc.UpdatableBlobStream::boolean materialized, org.apache.derby.impl.jdbc.UpdatableBlobStream::org.apache.derby.impl.jdbc.EmbedBlob blob, org.apache.derby.impl.jdbc.UpdatableBlobStream::updateIfRequired():void]
org.apache.derby.impl.sql.catalog.DataDictionaryImpl	[org.apache.derby.impl.sql.catalog.DataDictionaryImpl::org.apache.derby.impl.sql.catalog.TabInfoImpl[] noncoreInfo, org.apache.derby.impl.sql.catalog.DataDictionaryImpl::initializeNoncoreInfo():void, org.apache.derby.impl.sql.catalog.DataDictionaryImpl::clearNoncoreTable(int):void, org.apache.derby.impl.sql.catalog.DataDictionaryImpl::initializeCatalogInfo():void]
org.apache.derby.impl.sql.compile.ActivationClassBuilder	[org.apache.derby.impl.sql.compile.ActivationClassBuilder::org.apache.derby.iapi.services.compiler.LocalField targetResultSetField, org.apache.derby.impl.sql.compile.ActivationClassBuilder::rememberCursorTarget(org.apache.derby.iapi.services.compiler.MethodBuilder):void, org.apache.derby.impl.sql.compile.ActivationClassBuilder::rememberCursor(org.apache.derby.iapi.services.compiler.MethodBuilder):void, org.apache.derby.impl.sql.compile.ActivationClassBuilder::org.apache.derby.iapi.services.compiler.LocalField cursorResultSetField, org.apache.derby.impl.sql.compile.ActivationClassBuilder::addCursorPositionCode():void]
org.apache.derby.impl.sql.compile.SubqueryNode	[org.apache.derby.impl.sql.compile.SubqueryNode::boolean foundVariant, org.apache.derby.impl.sql.compile.SubqueryNode::boolean doneInvariantCheck, org.apache.derby.impl.sql.compile.SubqueryNode::isInvariant():boolean]
org.apache.derby.impl.sql.execute.VTIResultSet	[org.apache.derby.impl.sql.execute.VTIResultSet::org.apache.derby.iapi.services.loader.GeneratedMethod row, org.apache.derby.impl.sql.execute.VTIResultSet::getAllocatedRow():org.apache.derby.iapi.sql.execute.ExecRow, org.apache.derby.impl.sql.execute.VTIResultSet::org.apache.derby.iapi.sql.execute.ExecRow allocatedRow]
org.apache.derby.impl.store.raw.data.BaseDataFileFactory	[org.apache.derby.impl.store.raw.data.BaseDataFileFactory::java.util.Hashtable postRecoveryRemovedFiles, org.apache.derby.impl.store.raw.data.BaseDataFileFactory::org.apache.derby.io.StorageFile actionFile, org.apache.derby.impl.store.raw.data.BaseDataFileFactory::fileToRemove(org.apache.derby.io.StorageFile, boolean):void]
org.apache.derby.impl.store.raw.xact.TransactionTable	[org.apache.derby.impl.store.raw.xact.TransactionTable::findTransactionEntry(org.apache.derby.iapi.store.raw.xact.TransactionId):org.apache.derby.impl.store.raw.xact.TransactionTableEntry, org.apache.derby.impl.store.raw.xact.TransactionTable::add(org.apache.derby.impl.store.raw.xact.Xact, boolean):void, org.apache.derby.impl.store.raw.xact.TransactionTable::findAndAssumeTransaction(org.apache.derby.iapi.store.raw.xact.TransactionId, org.apache.derby.iapi.store.raw.xact.RawTransaction):boolean, org.apache.derby.impl.store.raw.xact.TransactionTable::getMostRecentRollbackFirstTransaction(org.apache.derby.iapi.store.raw.xact.RawTransaction):boolean, org.apache.derby.impl.store.raw.xact.TransactionTable::getMostRecentTransactionForRollback(org.apache.derby.iapi.store.raw.xact.RawTransaction):boolean]
org.apache.derby.impl.store.raw.xact.TransactionTable	[org.apache.derby.impl.store.raw.xact.TransactionTable::findTransactionEntry(org.apache.derby.iapi.store.raw.xact.TransactionId):org.apache.derby.impl.store.raw.xact.TransactionTableEntry, org.apache.derby.impl.store.raw.xact.TransactionTable::add(org.apache.derby.impl.store.raw.xact.Xact, boolean):void, org.apache.derby.impl.store.raw.xact.TransactionTable::findAndAssumeTransaction(org.apache.derby.iapi.store.raw.xact.TransactionId, org.apache.derby.iapi.store.raw.xact.RawTransaction):boolean, org.apache.derby.impl.store.raw.xact.TransactionTable::getMostRecentRollbackFirstTransaction(org.apache.derby.iapi.store.raw.xact.RawTransaction):boolean, org.apache.derby.impl.store.raw.xact.TransactionTable::getMostRecentTransactionForRollback(org.apache.derby.iapi.store.raw.xact.RawTransaction):boolean, org.apache.derby.impl.store.raw.xact.TransactionTable::hasRollbackFirstTransaction():boolean, org.apache.derby.impl.store.raw.xact.TransactionTable::hasPreparedXact(boolean):boolean, org.apache.derby.impl.store.raw.xact.TransactionTable::getMostRecentPreparedRecoveredXact(org.apache.derby.iapi.store.raw.xact.RawTransaction):boolean, org.apache.derby.impl.store.raw.xact.TransactionTable::remove(org.apache.derby.iapi.store.raw.xact.TransactionId):boolean]
org.apache.derby.impl.services.monitor.UpdateServiceProperties	[org.apache.derby.impl.services.monitor.UpdateServiceProperties::org.apache.derby.iapi.services.monitor.PersistentService serviceType, org.apache.derby.impl.services.monitor.UpdateServiceProperties::java.lang.String serviceName, org.apache.derby.impl.services.monitor.UpdateServiceProperties::org.apache.derby.io.WritableStorageFactory storageFactory, org.apache.derby.impl.services.monitor.UpdateServiceProperties::saveServiceProperties():void, org.apache.derby.impl.services.monitor.UpdateServiceProperties::update():void]
